C51 COMPILER V6.11.3B,  MAIN                      07/06/111  13:42:24  PAGE  1

QCW(0x00002D1A)

WIN32 C51 COMPILER V6.11.3B, COMPILATION OF MODULE MAIN      
OBJECT MODULE PLACED IN f:\uc4.0\main.obj
COMPILER INVOKED BY: C51.EXE F:\UC4.0\MAIN.C OBJECT(F:\UC4.0\MAIN.OBJ) PIN(C:\FS
            -I\INC) NOAM PR(F:\UC4.0\MAIN.LST) CD SB OE(1) SM FP(NOFLOAT) PW(80)
            - 

stmt level    source
   1          /*Version:	TMU1.1b
   2            
   3            The Project is AT89C51RC2 Based project, it measures the width o
            -f the pulse (mas = 100msec)
   4            using Programmable Counter Arrays (PCA).The LCD 8 bit Interface 
            -with Busy Flag Technique is
   5            incorporated for display. The results can either be display on L
            -CD, or being logged  to  PC
   6            serially at the buadrate of 19200. A button is used to make the 
            -system Ready.
   7           
   8            Programmer:	Sajjad Hussain, JE, SDPD, ICCC, 12-11-2008.
   9          
  10            Simulted: 	Proteus 7.0
  11            
  12            Crystal	22118400
  13            Serial BaudRate 	19200 clocked at 22118400
  14            Timers					clocked at 22118400
  15            PCA Timers			clocked at 614400	(Timer0  22118400/12/3)
  16            Measureable Time	106.7ms
  17          
  18            
  19            Modified:	12-12-2010
  20            
  21              PCA Timers			clocked at 460800	(Timer0  22118400/12/4)
  22              Measureable Time	  142.2ms
  23              
  24            Start Pulse                              ____________________
  25            																					|
  26            																					|
  27            																					|_____________________________________
  28            Stop Pulse 1                         		     							 ____________
            -________
  29            																							|
  30            																							|
  31          							   		_______________________________________|
  32            Stop Pulse 1  	 	                      		     							 __________
            -__________
  33          	  																							|
  34            																								|
  35          							   			_______________________________________|
  36          
  37            Modified: 06-07-2011
  38            	PCA 0-3			Stop Channels
  39            	PCA 4				Start Channel
  40            	One Digit after Decimal Point
  41            	Serial Port Removed
  42          */
  43          #include "at89c51rc2.h"
  44          #define Putc LcdWriteChar
  45          
  46          //Pins Assignments
  47          sbit BKLT = P2^4;//3; 
  48          sbit RS  = P2^2;//4; 
  49          sbit RW  = P2^5;
  50          sbit EN  = P2^3;//6;
  51          sbit LED = P2^7;
  52          sbit BS  = P0^7;
  53          
  54          unsigned char Key1,Key2,i,g;
  55          bit isInit=0,finish;
  56          //idata unsigned int PosEdge[4],NegEdge[4];
  57          idata unsigned int Stop[4];
  58          char cnt=0;
  59          
  60          //Function Prototypes
  61          void LcdInit();
  62          void DelayUs(void);
  63          void DelayMs(void);
  64          void LcdClear(void);
  65          void LcdWriteStr(char *var);
  66          void LcdWriteCmd(unsigned char c);
  67          void LcdWriteChar(unsigned char var);
  68          void LongToAscii(unsigned long Value);
  69          void LcdGotoXY(unsigned char r,unsigned char c);
  70          void Convert(unsigned int NegEdge);
  71          
  72          // Main Program Starts Here
  73          void main()
  74          {
  75   1      	// Set External Interrupt Settings
  76   1      	EX0 = 1;
  77   1      	IT0 = 1;
  78   1      	
  79   1      	// Set Timer0 used as Clock for PCA
  80   1      	TMOD = 0x12;
  81   1      	TL0  = 0xFC;// Divide by 4
  82   1      	TH0  = 0xFC;// 
  83   1      	TR0  = 1;
  84   1              
  85   1      	// Set PCA Module and PCA Interrupt
  86   1      	CCON = 0x00;// stop timre, clear flags
  87   1      	CMOD = 0x04;// PCA Count Pulse Select
  88   1      	CH = 0;CL = 0; // Clear PCA Timer Registers
  89   1      	CCAPM0 = 0;	//Positive Edge Stop Pulse 1
  90   1      	CCAPM1 = 0;	//Positive Edge Stop Pulse 2
  91   1      	CCAPM2 = 0;	//Positive Edge Stop Pulse 3
  92   1      	CCAPM3 = 0; //Positive Edge Stop Pulse 4
  93   1      	CCAPM4 = 0; //Negative Edge Start Pulse
  94   1      
  95   1      	LED = 0;
  96   1      	// Enable Interrupts
  97   1      	IEN0 = IEN0 | 0xC1;
  98   1         
  99   1         // Initial Screen
 100   1      	LcdInit();
 101   1      	LcdGotoXY(1,3);
 102   1      	LcdWriteStr("Time  Measuring");
 103   1      	LcdGotoXY(2,3);
 104   1      	LcdWriteStr(" Unit (TMU-01)");	
 105   1      	LcdGotoXY(3,3);
 106   1      	LcdWriteStr("Range: 1-135ms");
 107   1      	isInit = 1;
 108   1      	
 109   1      	//Running Forever
 110   1      	while(1)
 111   1      	{
 112   2      		// For Local LCD Display
 113   2      		if(finish)
 114   2      		{
 115   3      			finish = 0;
 116   3      			LED = 0;
 117   3      			LcdClear();
 118   3      		 	for(i=0;i<4;i++)
 119   3      		 	{
 120   4      	 			LcdGotoXY(i+1,3);
 121   4      	 			LcdWriteStr("Ch#");
 122   4      	 			LcdWriteChar(i+49);
 123   4      	 			LcdWriteChar(':');
 124   4      		 		LcdWriteChar(' ');
 125   4       		 		//if(Stop[i]<0xEA00)//130
 126   4       		 		//if(Stop[i]<0xF300)//135
 127   4       		 		if(Stop[i]<0xFC00)//140
 128   4       		 		{
 129   5       		 			Convert(Stop[i]);
 130   5       		 			LcdWriteStr(" ms");
 131   5       		 		}
 132   4       		 		else
 133   4       		 			LcdWriteStr("Overflow");
 134   4      		 	}//for
 135   3      		}//finish
 136   2      	}//while
 137   1      }//main
 138          
 139          // Interrupt Routines
 140          void PCATimers() interrupt 6  using 1
 141          {
 142   1      	if(CF)
 143   1      	{
 144   2      		CCON = 0x00; // Stop Timer, Clear CF Flag
 145   2      	 	CMOD = 0x04;
 146   2      	 	finish = 1;
 147   2      	}//Cf
 148   1      	//Start Pulse
 149   1      	if(CCF4)
 150   1      	{
 151   2      		CCF4 = 0;
 152   2      		CCAPM4 = 0x00;				// Disable ECCFn bit
 153   2      		
 154   2      		CCAPM0 = 0x11; 			//Negative Edge	Stop Pulse 1
 155   2      		CCAPM1 = 0x11;				//Negative Edge	Stop Pulse 2
 156   2      		CCAPM2 = 0x11;				//Negative Edge	Stop Pulse 3
 157   2      		CCAPM3 = 0x11; 			//Negative Edge	Stop Pulse 4
 158   2      		CL =0; CH =0;				// Reset the Timer Registers
 159   2      		CMOD = 0x05;				// Enable Overflow Interrupt
 160   2      		CR = 1;						// Run PCA Timer
 161   2      	}
 162   1      	//Stop Pulse 4
 163   1      	if(CCF0)
 164   1      	{
 165   2      		CCF0 = 0;
 166   2       		Stop[3] = CCAP0L | (CCAP0H<<8);
 167   2       		CCAPM0 = 0x00;
 168   2      	}
 169   1      	//Stop Pulse 3
 170   1      	if(CCF1)
 171   1      	{
 172   2      		CCF1 = 0;
 173   2      		Stop[2] = CCAP1L | (CCAP1H<<8);
 174   2      		CCAPM1 = 0x00;
 175   2      	}
 176   1      	//Stop Pulse 2
 177   1      	if(CCF2)
 178   1      	{
 179   2      		CCF2 = 0;
 180   2       		Stop[1] = CCAP2L | (CCAP2H<<8);
 181   2      		CCAPM2 = 0x00;
 182   2      	}
 183   1      	//Stop Pulse 1
 184   1      	if(CCF3)
 185   1      	{
 186   2      		CCF3 = 0;
 187   2      		Stop[0] = CCAP3L | (CCAP3H<<8);
 188   2       		CCAPM3 = 0x00;
 189   2      	}	
 190   1      }
 191          
 192          void KeyInt() interrupt 0 
 193          {  
 194   1      	if(isInit)
 195   1      	{
 196   2      		DelayMs();
 197   2      		LcdClear();
 198   2      		LcdGotoXY(2,6);
 199   2      		LcdWriteStr("TMU Ready");
 200   2      		LED = 1;
 201   2      		Stop[0] = 0;
 202   2      		Stop[1] = 0;
 203   2      		Stop[2] = 0;
 204   2      		Stop[3] = 0;
 205   2      		CL =0;CH =0;
 206   2      		CCON = 0x00;// stop timre, clear flags
 207   2      		CMOD = 0x04;// PCA Count Pulse Select
 208   2      		CCAPM4 = 0x21;	//Positive Edge Start Pulse
 209   2      	}//if Init
 210   1      }
 211          
 212          
 213          // Function Definitions
 214          
 215          void LongToAscii(unsigned long Value)
 216          {
 217   1       //Handles Upto 10 Digits
 218   1       bit isDivisible=0;
 219   1       unsigned long Divisor = 1000000000;
 220   1       unsigned char k;
 221   1       unsigned char Q;
 222   1       if(Value==0)	
 223   1       {
 224   2       	Putc('0');
 225   2       	return;
 226   2       }
 227   1       for(k=0;k<10;k++)
 228   1       {
 229   2       	if (Divisor<=Value) isDivisible=1;
 230   2      	if(isDivisible)
 231   2       	{
 232   3        	   Q = (unsigned char )(Value/Divisor);
 233   3        		LcdWriteChar(Q+48); 
 234   3       		Value = Value - (Q)*Divisor;
 235   3      	}//End if (isDivisible)
 236   2      	Divisor = Divisor/10;
 237   2       }//End for
 238   1      }
 239          
 240          void Convert(unsigned int NegEdge)
 241          {
 242   1      //unsigned char temp;
 243   1      unsigned int pw;
 244   1      unsigned long time;
 245   1      long wPart;
 246   1      unsigned int fPart;
 247   1      unsigned int decimal;
 248   1      decimal = 1000;
 249   1      
 250   1      			pw = NegEdge;
 251   1      			time = (unsigned long) pw;
 252   1      			time = time *10;
 253   1      			wPart = (time/4608);
 254   1      			time = time*decimal;
 255   1      			time = time/4608;
 256   1      			fPart = (int)(time - wPart*decimal);
 257   1      			LongToAscii(wPart);
 258   1      			Putc('.');
 259   1      			
 260   1      			Putc((fPart/100)+48);
 261   1      			/*decimal=decimal/10;
 262   1      			while(fPart<decimal)
 263   1      			{
 264   1      				if(comm)
 265   1      					SendChar('0');
 266   1      				else
 267   1      				 	Putc('0');
 268   1      			 	decimal=decimal/10;
 269   1      			}
 270   1      			
 271   1      			LongToAscii(fPart,comm);
 272   1      			
 273   1              if(comm=0)
 274   1              {
 275   1      			Putc(' ');
 276   1      			temp = pw/10000; 
 277   1      			pw = pw-temp*10000;
 278   1      			Putc((temp)+48);
 279   1      		
 280   1      			temp = pw/1000; 
 281   1      			pw = pw-temp*1000;
 282   1      			Putc((temp)+48);
 283   1      			
 284   1      			temp = pw/100; 
 285   1      			pw = pw-temp*100;
 286   1      			Putc((temp)+48);
 287   1      			
 288   1      			temp = pw/10; 
 289   1      			pw = pw-temp*10;
 290   1      			Putc((temp)+48);
 291   1      			
 292   1      			Putc((pw)+48);
 293   1      			}*/
 294   1      }
 295          
 296          void DelayUs(void)
 297          {
 298   1      	TL1 = 0x90;TH1 = 0xFE;//200 usec at 22.1184MHz
 299   1      	//TL1 = 0x48;TH1 = 0xFF;//100 usec at 22.1184MHz
 300   1      	//TL1 = 0xA4;TH1 = 0xFF;//50 usec at 22.1184MHz
 301   1      	//TL1 = 0xD2;TH1 = 0xFF;//25 usec at 22.1184MHz
 302   1      	//TL1 = 0xF7;TH1 = 0xFF;//5 usec at 22.1184MHz
 303   1      	//TL1 = 0xEE;TH1 = 0xFF;//10 usec at 22.1184MHz
 304   1      	TR1  = 1;
 305   1      	while(!TF1);
 306   1      	TR1  = 0;
 307   1      	TF1  = 0;
 308   1      }
 309          
 310          void DelayMs(void)
 311          {
 312   1      	TL1 = 0x00;TH1 = 0x04;//35ms at 22.1184MHz
 313   1      	TR1  = 1;
 314   1      	while(!TF1);
 315   1      	TR1  = 0;
 316   1      	TF1  = 0;
 317   1      }
 318          // 8bit LCD Interface
 319          void LcdInit()
 320          {
 321   1         LcdWriteCmd(0x38);	//Function Set 0x38
 322   1         LcdWriteCmd(0x38);	//Function Set
 323   1         LcdWriteCmd(0x38);	//Function Set
 324   1      	LcdWriteCmd(0x06);	//Entry Mode Set 0x06
 325   1         LcdWriteCmd(0x0C);	//Display On  Off Control 0x0C
 326   1      }
 327          
 328          void LcdBusy()
 329          {
 330   1      	BS   = 1;			//Make D7th bit of LCD as i/p
 331   1         EN   = 1;         //Make port pin as o/p
 332   1         RS   = 0;         //Selected command register
 333   1         RW   = 1;         //We are reading
 334   1         while(BS)
 335   1         {   					//read busy flag again and again till it becomes 0 Ena
            -ble H->L
 336   2         	EN   = 0;
 337   2            EN   = 1;
 338   2         }
 339   1      }
 340          void LcdWriteCmd(unsigned char var)
 341          {
 342   1      	P0 = var;      	//Commands to be Written
 343   1         RS   = 0;        	//Selected command register
 344   1         RW   = 0;        	//We are writing in instruction register
 345   1         EN   = 1;        	//Enable H->L
 346   1         EN   = 0;
 347   1         LcdBusy();      //Wait for LCD to process the command
 348   1      }
 349          void LcdWriteChar(unsigned char var)
 350          {
 351   1      	P0 = var;      	//Data/Character to be Written
 352   1         RS   = 1;         //Selected data register
 353   1         RW   = 0;         //We are writing
 354   1         EN   = 1;         //Enable H->L
 355   1         EN   = 0;
 356   1         LcdBusy();      //Wait for LCD to process the command
 357   1      }
 358          void LcdWriteStr(char *var)
 359          {
 360   1      	while(*var)       //till string ends send characters one by one
 361   1         	LcdWriteChar(*var++);
 362   1      }
 363          
 364          void LcdGotoXY(unsigned char row, unsigned char col)
 365          {
 366   1      	switch (row)
 367   1      	{
 368   2      		case 1: LcdWriteCmd(0x80 + col - 1); break;
 369   2      		case 2: LcdWriteCmd(0xc0 + col - 1); break;
 370   2      		case 3: LcdWriteCmd(0x94 + col - 1); break;
 371   2      		case 4: LcdWriteCmd(0xd4 + col - 1); break;
 372   2      		/*
 373   2      		case 1: LcdWriteCmd(0x80 + col - 1); break;
 374   2      		case 2: LcdWriteCmd(0xc0 + col - 1); break;
 375   2      		case 3: LcdWriteCmd(0x90 + col - 1); break;
 376   2      		case 4: LcdWriteCmd(0xd0 + col - 1); break;*/
 377   2      		default: break;
 378   2      	}
 379   1      }
 380          void LcdClear()
 381          {
 382   1       unsigned char h;
 383   1       LcdWriteCmd(0x01);
 384   1       for(h=0;h<100;h++)
 385   1      		DelayUs();
 386   1      }
 387          
 388          
 389          
 390          
 391          
 392          
 393          
 394          
 395          
 396          
 397          
 398          
 399          
 400          
 401          
C51 COMPILER V6.11.3B,  MAIN                      07/06/111  13:42:24  PAGE  2

ASSEMBLY LISTING OF GENERATED OBJECT CODE

            ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 76 
0000 D2A8           SETB   EX0
                                           ; SOURCE LINE # 77 
0002 D288           SETB   IT0
                                           ; SOURCE LINE # 80 
0004 758912         MOV    TMOD,#012H
                                           ; SOURCE LINE # 81 
0007 758AFC         MOV    TL0,#0FCH
                                           ; SOURCE LINE # 82 
000A 758CFC         MOV    TH0,#0FCH
                                           ; SOURCE LINE # 83 
000D D28C           SETB   TR0
                                           ; SOURCE LINE # 86 
000F 75D800         MOV    CCON,#000H
                                           ; SOURCE LINE # 87 
0012 75D904         MOV    CMOD,#004H
                                           ; SOURCE LINE # 88 
0015 75F900         MOV    CH,#000H
0018 75E900         MOV    CL,#000H
                                           ; SOURCE LINE # 89 
001B 75DA00         MOV    CCAPM0,#000H
                                           ; SOURCE LINE # 90 
001E 75DB00         MOV    CCAPM1,#000H
                                           ; SOURCE LINE # 91 
0021 75DC00         MOV    CCAPM2,#000H
                                           ; SOURCE LINE # 92 
0024 75DD00         MOV    CCAPM3,#000H
                                           ; SOURCE LINE # 93 
0027 75DE00         MOV    CCAPM4,#000H
                                           ; SOURCE LINE # 95 
002A C2A7           CLR    LED
                                           ; SOURCE LINE # 97 
002C E5A8           MOV    A,IEN0
002E 44C1           ORL    A,#0C1H
0030 F5A8           MOV    IEN0,A
                                           ; SOURCE LINE # 100 
0032 120000  R      LCALL  LcdInit
                                           ; SOURCE LINE # 101 
0035 7F01           MOV    R7,#001H
0037 7D03           MOV    R5,#003H
0039 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 102 
003C 7B05           MOV    R3,#005H
003E 7A00    R      MOV    R2,#000H
0040 7900    R      MOV    R1,#000H
0042 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 103 
0045 7F02           MOV    R7,#002H
0047 7D03           MOV    R5,#003H
0049 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 104 
004C 7B05           MOV    R3,#005H
004E 7A00    R      MOV    R2,#000H
0050 7900    R      MOV    R1,#000H
0052 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 105 
0055 7F03           MOV    R7,#003H
0057 7D03           MOV    R5,#003H
0059 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 106 
005C 7B05           MOV    R3,#005H
005E 7A00    R      MOV    R2,#000H
0060 7900    R      MOV    R1,#000H
0062 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 107 
0065 D200    R      SETB   isInit
0067         ?WHILE1:
                                           ; SOURCE LINE # 113 
0067 3000FD  R      JNB    finish,?WHILE1
                                           ; SOURCE LINE # 115 
006A C200    R      CLR    finish
                                           ; SOURCE LINE # 116 
006C C2A7           CLR    LED
                                           ; SOURCE LINE # 117 
006E 120000  R      LCALL  LcdClear
                                           ; SOURCE LINE # 118 
0071 750000  R      MOV    i,#000H
0074         ?FOR1:
0074 E500    R      MOV    A,i
0076 B40400         CJNE   A,#004H,?LAB5
0079         ?LAB5:
0079 50EC           JNC    ?WHILE1
                                           ; SOURCE LINE # 120 
007B E500    R      MOV    A,i
007D 04             INC    A
007E FF             MOV    R7,A
007F 7D03           MOV    R5,#003H
0081 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 121 
0084 7B05           MOV    R3,#005H
0086 7A00    R      MOV    R2,#000H
0088 7900    R      MOV    R1,#000H
008A 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 122 
008D E500    R      MOV    A,i
008F 2431           ADD    A,#031H
0091 FF             MOV    R7,A
0092 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 123 
0095 7F3A           MOV    R7,#03AH
0097 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 124 
009A 7F20           MOV    R7,#020H
009C 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 127 
009F E500    R      MOV    A,i
00A1 23             RL     A
00A2 7900    R      MOV    R1,#Stop
00A4 2400    R      ADD    A,#Stop
00A6 F8             MOV    R0,A
00A7 B6FC00         CJNE   @R0,#0FCH,?LAB7
00AA         ?LAB7:
00AA 5018           JNC    ?ELSE3
                                           ; SOURCE LINE # 129 
00AC E500    R      MOV    A,i
00AE 23             RL     A
00AF 29             ADD    A,R1
00B0 F8             MOV    R0,A
00B1 8606           MOV    AR6,@R0
00B3 08             INC    R0
00B4 8607           MOV    AR7,@R0
00B6 120000  R      LCALL  _Convert
                                           ; SOURCE LINE # 130 
00B9 7B05           MOV    R3,#005H
00BB 7A00    R      MOV    R2,#000H
00BD 7900    R      MOV    R1,#000H
00BF 120000  R      LCALL  _LcdWriteStr
00C2 8009           SJMP   ?NXT8
00C4         ?ELSE3:
                                           ; SOURCE LINE # 133 
00C4 7B05           MOV    R3,#005H
00C6 7A00    R      MOV    R2,#000H
00C8 7900    R      MOV    R1,#000H
00CA 120000  R      LCALL  _LcdWriteStr
00CD         ?NXT8:
                                           ; SOURCE LINE # 118 
00CD 0500    R      INC    i
00CF 80A3           SJMP   ?FOR1
00D1 8094           SJMP   ?WHILE1

            ; FUNCTION main (END)

            ; FUNCTION PCATimers (BEGIN)
                                           ; SOURCE LINE # 188 
0000 C0E0           PUSH   ACC
0002 C0D0           PUSH   PSW
0004 75D008         MOV    PSW,#008H
                                           ; SOURCE LINE # 142 
0007 30DF08         JNB    CF,?NXT17
                                           ; SOURCE LINE # 144 
000A 75D800         MOV    CCON,#000H
                                           ; SOURCE LINE # 145 
000D 75D904         MOV    CMOD,#004H
                                           ; SOURCE LINE # 146 
0010 D200    R      SETB   finish
0012         ?NXT17:
                                           ; SOURCE LINE # 149 
0012 30DC1C         JNB    CCF4,?NXT18
                                           ; SOURCE LINE # 151 
0015 C2DC           CLR    CCF4
                                           ; SOURCE LINE # 152 
0017 75DE00         MOV    CCAPM4,#000H
                                           ; SOURCE LINE # 154 
001A 75DA11         MOV    CCAPM0,#011H
                                           ; SOURCE LINE # 155 
001D 75DB11         MOV    CCAPM1,#011H
                                           ; SOURCE LINE # 156 
0020 75DC11         MOV    CCAPM2,#011H
                                           ; SOURCE LINE # 157 
0023 75DD11         MOV    CCAPM3,#011H
                                           ; SOURCE LINE # 158 
0026 75E900         MOV    CL,#000H
0029 75F900         MOV    CH,#000H
                                           ; SOURCE LINE # 159 
002C 75D905         MOV    CMOD,#005H
                                           ; SOURCE LINE # 160 
002F D2DE           SETB   CR
0031         ?NXT18:
                                           ; SOURCE LINE # 163 
0031 30D812         JNB    CCF0,?NXT19
                                           ; SOURCE LINE # 165 
0034 C2D8           CLR    CCF0
                                           ; SOURCE LINE # 166 
0036 E5FA           MOV    A,CCAP0H
0038 FA             MOV    R2,A
0039 E5EA           MOV    A,CCAP0L
003B FD             MOV    R5,A
003C EA             MOV    A,R2
003D 7900    R      MOV    R1,#Stop+06H
003F F7             MOV    @R1,A
0040 09             INC    R1
0041 A70D           MOV    @R1,AR5
                                           ; SOURCE LINE # 167 
0043 75DA00         MOV    CCAPM0,#000H
0046         ?NXT19:
                                           ; SOURCE LINE # 170 
0046 30D912         JNB    CCF1,?NXT20
                                           ; SOURCE LINE # 172 
0049 C2D9           CLR    CCF1
                                           ; SOURCE LINE # 173 
004B E5FB           MOV    A,CCAP1H
004D FA             MOV    R2,A
004E E5EB           MOV    A,CCAP1L
0050 FD             MOV    R5,A
0051 EA             MOV    A,R2
0052 7900    R      MOV    R1,#Stop+04H
0054 F7             MOV    @R1,A
0055 09             INC    R1
0056 A70D           MOV    @R1,AR5
                                           ; SOURCE LINE # 174 
0058 75DB00         MOV    CCAPM1,#000H
005B         ?NXT20:
                                           ; SOURCE LINE # 177 
005B 30DA12         JNB    CCF2,?NXT21
                                           ; SOURCE LINE # 179 
005E C2DA           CLR    CCF2
                                           ; SOURCE LINE # 180 
0060 E5FC           MOV    A,CCAP2H
0062 FA             MOV    R2,A
0063 E5EC           MOV    A,CCAP2L
0065 FD             MOV    R5,A
0066 EA             MOV    A,R2
0067 7900    R      MOV    R1,#Stop+02H
0069 F7             MOV    @R1,A
006A 09             INC    R1
006B A70D           MOV    @R1,AR5
                                           ; SOURCE LINE # 181 
006D 75DC00         MOV    CCAPM2,#000H
0070         ?NXT21:
                                           ; SOURCE LINE # 184 
0070 30DB12         JNB    CCF3,?NXT23
                                           ; SOURCE LINE # 186 
0073 C2DB           CLR    CCF3
                                           ; SOURCE LINE # 187 
0075 E5FD           MOV    A,CCAP3H
0077 FA             MOV    R2,A
0078 E5ED           MOV    A,CCAP3L
007A FD             MOV    R5,A
007B EA             MOV    A,R2
007C 7900    R      MOV    R1,#Stop
007E F7             MOV    @R1,A
007F 09             INC    R1
0080 A70D           MOV    @R1,AR5
                                           ; SOURCE LINE # 188 
0082 75DD00         MOV    CCAPM3,#000H
0085         ?NXT23:
0085 D0D0           POP    PSW
0087 D0E0           POP    ACC
0089 32             RETI   

            ; FUNCTION PCATimers (END)

            ; FUNCTION KeyInt (BEGIN)
                                           ; SOURCE LINE # 208 
0000 C0E0           PUSH   ACC
0002 C0F0           PUSH   B
0004 C083           PUSH   DPH
0006 C082           PUSH   DPL
0008 C0D0           PUSH   PSW
000A C000           PUSH   AR0
000C C001           PUSH   AR1
000E C002           PUSH   AR2
0010 C003           PUSH   AR3
0012 C004           PUSH   AR4
0014 C005           PUSH   AR5
0016 C006           PUSH   AR6
0018 EF             MOV    A,R7
0019 C007           PUSH   AR7
                                           ; SOURCE LINE # 194 
001B 300039  R      JNB    isInit,?NXT27
                                           ; SOURCE LINE # 196 
001E 120000  R      LCALL  DelayMs
                                           ; SOURCE LINE # 197 
0021 120000  R      LCALL  LcdClear
                                           ; SOURCE LINE # 198 
0024 7F02           MOV    R7,#002H
0026 7D06           MOV    R5,#006H
0028 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 199 
002B 7B05           MOV    R3,#005H
002D 7A00    R      MOV    R2,#000H
002F 7900    R      MOV    R1,#000H
0031 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 200 
0034 D2A7           SETB   LED
                                           ; SOURCE LINE # 201 
0036 7900    R      MOV    R1,#Stop
0038 E4             CLR    A
0039 F7             MOV    @R1,A
003A 09             INC    R1
003B F7             MOV    @R1,A
                                           ; SOURCE LINE # 202 
003C 7900    R      MOV    R1,#Stop+02H
003E F7             MOV    @R1,A
003F 09             INC    R1
0040 F7             MOV    @R1,A
                                           ; SOURCE LINE # 203 
0041 7900    R      MOV    R1,#Stop+04H
0043 F7             MOV    @R1,A
0044 09             INC    R1
0045 F7             MOV    @R1,A
                                           ; SOURCE LINE # 204 
0046 7900    R      MOV    R1,#Stop+06H
0048 F7             MOV    @R1,A
0049 09             INC    R1
004A F7             MOV    @R1,A
                                           ; SOURCE LINE # 205 
004B F5E9           MOV    CL,A
004D F5F9           MOV    CH,A
                                           ; SOURCE LINE # 206 
004F F5D8           MOV    CCON,A
                                           ; SOURCE LINE # 207 
0051 75D904         MOV    CMOD,#004H
                                           ; SOURCE LINE # 208 
0054 75DE21         MOV    CCAPM4,#021H
0057         ?NXT27:
0057 D007           POP    AR7
0059 D006           POP    AR6
005B D005           POP    AR5
005D D004           POP    AR4
005F D003           POP    AR3
0061 D002           POP    AR2
0063 D001           POP    AR1
0065 D000           POP    AR0
0067 D0D0           POP    PSW
0069 D082           POP    DPL
006B D083           POP    DPH
006D D0F0           POP    B
006F D0E0           POP    ACC
0071 32             RETI   

            ; FUNCTION KeyInt (END)

            ; FUNCTION _LongToAscii (BEGIN)
                                           ; SOURCE LINE # 236 
0000 8C00    R      MOV    Value,R4
0002 8D00    R      MOV    Value+01H,R5
0004 8E00    R      MOV    Value+02H,R6
0006 8F00    R      MOV    Value+03H,R7
                                           ; SOURCE LINE # 218 
0008 C200    R      CLR    isDivisible
                                           ; SOURCE LINE # 219 
000A 75003B  R      MOV    Divisor,#03BH
000D 75009A  R      MOV    Divisor+01H,#09AH
0010 7500CA  R      MOV    Divisor+02H,#0CAH
0013 E4             CLR    A
0014 F500    R      MOV    Divisor+03H,A
                                           ; SOURCE LINE # 222 
0016 EC             MOV    A,R4
0017 4D             ORL    A,R5
0018 4E             ORL    A,R6
0019 4F             ORL    A,R7
001A 7006           JNZ    ?NXT33
                                           ; SOURCE LINE # 224 
001C 7F30           MOV    R7,#030H
001E 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 225 
0021 22             RET    
0022         ?NXT33:
                                           ; SOURCE LINE # 227 
0022 750000  R      MOV    k,#000H
0025         ?FOR3:
                                           ; SOURCE LINE # 229 
0025 C000    R      PUSH   Divisor
0027 C000    R      PUSH   Divisor+01H
0029 C000    R      PUSH   Divisor+02H
002B C000    R      PUSH   Divisor+03H
002D AC00    R      MOV    R4,Value
002F AD00    R      MOV    R5,Value+01H
0031 AE00    R      MOV    R6,Value+02H
0033 AF00    R      MOV    R7,Value+03H
0035 120000  R      LCALL  ?C_CMPL
0038 BF0102         CJNE   R7,#001H,?LAB21
003B 8002           SJMP   ?NXT36
003D         ?LAB21:
003D D200    R      SETB   isDivisible
003F         ?NXT36:
                                           ; SOURCE LINE # 230 
003F 300041  R      JNB    isDivisible,?NXT37
                                           ; SOURCE LINE # 232 
0042 C000    R      PUSH   Value
0044 C000    R      PUSH   Value+01H
0046 C000    R      PUSH   Value+02H
0048 C000    R      PUSH   Value+03H
004A AC00    R      MOV    R4,Divisor
004C AD00    R      MOV    R5,Divisor+01H
004E AE00    R      MOV    R6,Divisor+02H
0050 AF00    R      MOV    R7,Divisor+03H
0052 120000  R      LCALL  ?C_ULDIV_SP
0055 8F00    R      MOV    Q,R7
                                           ; SOURCE LINE # 233 
0057 E500    R      MOV    A,Q
0059 2430           ADD    A,#030H
005B FF             MOV    R7,A
005C 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 234 
005F C000    R      PUSH   Value
0061 C000    R      PUSH   Value+01H
0063 C000    R      PUSH   Value+02H
0065 C000    R      PUSH   Value+03H
0067 C000    R      PUSH   Divisor
0069 C000    R      PUSH   Divisor+01H
006B C000    R      PUSH   Divisor+02H
006D C000    R      PUSH   Divisor+03H
006F E4             CLR    A
0070 FE             MOV    R6,A
0071 FC             MOV    R4,A
0072 FD             MOV    R5,A
0073 AF00    R      MOV    R7,Q
0075 120000  R      LCALL  ?C_LMUL
0078 120000  R      LCALL  ?C_LSUB
007B 8C00    R      MOV    Value,R4
007D 8D00    R      MOV    Value+01H,R5
007F 8E00    R      MOV    Value+02H,R6
0081 8F00    R      MOV    Value+03H,R7
0083         ?NXT37:
                                           ; SOURCE LINE # 236 
0083 C000    R      PUSH   Divisor
0085 C000    R      PUSH   Divisor+01H
0087 C000    R      PUSH   Divisor+02H
0089 C000    R      PUSH   Divisor+03H
008B E4             CLR    A
008C FC             MOV    R4,A
008D FD             MOV    R5,A
008E FE             MOV    R6,A
008F 740A           MOV    A,#00AH
0091 FF             MOV    R7,A
0092 120000  R      LCALL  ?C_ULDIV_SP
0095 8C00    R      MOV    Divisor,R4
0097 8D00    R      MOV    Divisor+01H,R5
0099 8E00    R      MOV    Divisor+02H,R6
009B 8F00    R      MOV    Divisor+03H,R7
                                           ; SOURCE LINE # 227 
009D 0500    R      INC    k
009F E500    R      MOV    A,k
00A1 B40A81         CJNE   A,#00AH,?FOR3
00A4 22             RET    

            ; FUNCTION _LongToAscii (END)

            ; FUNCTION _Convert (BEGIN)
              ; Register R6R7 is assigned to parameter NegEdge
              ; R4R5 is assigned to pw
                                           ; SOURCE LINE # 251 
0000 E4             CLR    A
0001 FD             MOV    R5,A
0002 FC             MOV    R4,A
0003 F500    R      MOV    time,A
0005 F500    R      MOV    time+01H,A
0007 8E00    R      MOV    time+02H,R6
0009 8F00    R      MOV    time+03H,R7
                                           ; SOURCE LINE # 252 
000B C000    R      PUSH   time
000D C000    R      PUSH   time+01H
000F C000    R      PUSH   time+02H
0011 C000    R      PUSH   time+03H
0013 FE             MOV    R6,A
0014 740A           MOV    A,#00AH
0016 FF             MOV    R7,A
0017 120000  R      LCALL  ?C_LMUL
001A 8C00    R      MOV    time,R4
001C 8D00    R      MOV    time+01H,R5
001E 8E00    R      MOV    time+02H,R6
0020 8F00    R      MOV    time+03H,R7
                                           ; SOURCE LINE # 253 
0022 C000    R      PUSH   time
0024 C000    R      PUSH   time+01H
0026 C000    R      PUSH   time+02H
0028 C000    R      PUSH   time+03H
002A E4             CLR    A
002B FC             MOV    R4,A
002C FD             MOV    R5,A
002D 7412           MOV    A,#012H
002F FE             MOV    R6,A
0030 E4             CLR    A
0031 FF             MOV    R7,A
0032 120000  R      LCALL  ?C_ULDIV_SP
0035 8C00    R      MOV    wPart,R4
0037 8D00    R      MOV    wPart+01H,R5
0039 8E00    R      MOV    wPart+02H,R6
003B 8F00    R      MOV    wPart+03H,R7
                                           ; SOURCE LINE # 254 
003D C000    R      PUSH   time
003F C000    R      PUSH   time+01H
0041 C000    R      PUSH   time+02H
0043 C000    R      PUSH   time+03H
0045 E4             CLR    A
0046 FC             MOV    R4,A
0047 FD             MOV    R5,A
0048 7403           MOV    A,#003H
004A FE             MOV    R6,A
004B 74E8           MOV    A,#0E8H
004D FF             MOV    R7,A
004E 120000  R      LCALL  ?C_LMUL
0051 8C00    R      MOV    time,R4
0053 8D00    R      MOV    time+01H,R5
0055 8E00    R      MOV    time+02H,R6
0057 8F00    R      MOV    time+03H,R7
                                           ; SOURCE LINE # 255 
0059 C000    R      PUSH   time
005B C000    R      PUSH   time+01H
005D C000    R      PUSH   time+02H
005F C000    R      PUSH   time+03H
0061 E4             CLR    A
0062 FC             MOV    R4,A
0063 FD             MOV    R5,A
0064 7412           MOV    A,#012H
0066 FE             MOV    R6,A
0067 E4             CLR    A
0068 FF             MOV    R7,A
0069 120000  R      LCALL  ?C_ULDIV_SP
006C 8C00    R      MOV    time,R4
006E 8D00    R      MOV    time+01H,R5
0070 8E00    R      MOV    time+02H,R6
0072 8F00    R      MOV    time+03H,R7
                                           ; SOURCE LINE # 256 
0074 C000    R      PUSH   time
0076 C000    R      PUSH   time+01H
0078 C000    R      PUSH   time+02H
007A C000    R      PUSH   time+03H
007C C000    R      PUSH   wPart
007E C000    R      PUSH   wPart+01H
0080 C000    R      PUSH   wPart+02H
0082 C000    R      PUSH   wPart+03H
0084 E4             CLR    A
0085 FC             MOV    R4,A
0086 FD             MOV    R5,A
0087 7403           MOV    A,#003H
0089 FE             MOV    R6,A
008A 74E8           MOV    A,#0E8H
008C FF             MOV    R7,A
008D 120000  R      LCALL  ?C_LMUL
0090 120000  R      LCALL  ?C_LSUB
0093 8E00    R      MOV    fPart,R6
0095 8F00    R      MOV    fPart+01H,R7
                                           ; SOURCE LINE # 257 
0097 AC00    R      MOV    R4,wPart
0099 AD00    R      MOV    R5,wPart+01H
009B AE00    R      MOV    R6,wPart+02H
009D AF00    R      MOV    R7,wPart+03H
009F 120000  R      LCALL  _LongToAscii
                                           ; SOURCE LINE # 258 
00A2 7F2E           MOV    R7,#02EH
00A4 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 260 
00A7 AE00    R      MOV    R6,fPart
00A9 AF00    R      MOV    R7,fPart+01H
00AB E4             CLR    A
00AC FC             MOV    R4,A
00AD 7D64           MOV    R5,#064H
00AF 120000  R      LCALL  ?C_UIDIV
00B2 EF             MOV    A,R7
00B3 2430           ADD    A,#030H
00B5 FF             MOV    R7,A
00B6 120000  R      LCALL  _LcdWriteChar
00B9 22             RET    

            ; FUNCTION _Convert (END)

            ; FUNCTION DelayUs (BEGIN)
                                           ; SOURCE LINE # 298 
0000 758B90         MOV    TL1,#090H
0003 758DFE         MOV    TH1,#0FEH
                                           ; SOURCE LINE # 304 
0006 D28E           SETB   TR1
0008         ?WHILE3:
                                           ; SOURCE LINE # 305 
0008 308FFD         JNB    TF1,?WHILE3
                                           ; SOURCE LINE # 306 
000B C28E           CLR    TR1
                                           ; SOURCE LINE # 307 
000D C28F           CLR    TF1
000F 22             RET    

            ; FUNCTION DelayUs (END)

            ; FUNCTION DelayMs (BEGIN)
                                           ; SOURCE LINE # 312 
0000 758B00         MOV    TL1,#000H
0003 758D04         MOV    TH1,#004H
                                           ; SOURCE LINE # 313 
0006 D28E           SETB   TR1
0008         ?WHILE5:
                                           ; SOURCE LINE # 314 
0008 308FFD         JNB    TF1,?WHILE5
                                           ; SOURCE LINE # 315 
000B C28E           CLR    TR1
                                           ; SOURCE LINE # 316 
000D C28F           CLR    TF1
000F 22             RET    

            ; FUNCTION DelayMs (END)

            ; FUNCTION LcdInit (BEGIN)
                                           ; SOURCE LINE # 321 
0000 7F38           MOV    R7,#038H
0002 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 322 
0005 7F38           MOV    R7,#038H
0007 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 323 
000A 7F38           MOV    R7,#038H
000C 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 324 
000F 7F06           MOV    R7,#006H
0011 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 325 
0014 7F0C           MOV    R7,#00CH
0016 120000  R      LCALL  _LcdWriteCmd
0019 22             RET    

            ; FUNCTION LcdInit (END)

            ; FUNCTION LcdBusy (BEGIN)
                                           ; SOURCE LINE # 330 
0000 D287           SETB   BS
                                           ; SOURCE LINE # 331 
0002 D2A3           SETB   EN
                                           ; SOURCE LINE # 332 
0004 C2A2           CLR    RS
                                           ; SOURCE LINE # 333 
0006 D2A5           SETB   RW
0008         ?WHILE7:
                                           ; SOURCE LINE # 334 
0008 308706         JNB    BS,?NXT43
                                           ; SOURCE LINE # 336 
000B C2A3           CLR    EN
                                           ; SOURCE LINE # 337 
000D D2A3           SETB   EN
000F 80F7           SJMP   ?WHILE7
0011         ?NXT43:
0011 22             RET    

            ; FUNCTION LcdBusy (END)

            ; FUNCTION _LcdWriteCmd (BEGIN)
              ; Register R7 is assigned to parameter var
                                           ; SOURCE LINE # 342 
0000 8F80           MOV    P0,R7
                                           ; SOURCE LINE # 343 
0002 C2A2           CLR    RS
                                           ; SOURCE LINE # 344 
0004 C2A5           CLR    RW
                                           ; SOURCE LINE # 345 
0006 D2A3           SETB   EN
                                           ; SOURCE LINE # 346 
0008 C2A3           CLR    EN
                                           ; SOURCE LINE # 347 
000A 120000  R      LCALL  LcdBusy
000D 22             RET    

            ; FUNCTION _LcdWriteCmd (END)

            ; FUNCTION _LcdWriteChar (BEGIN)
              ; Register R7 is assigned to parameter var
                                           ; SOURCE LINE # 351 
0000 8F80           MOV    P0,R7
                                           ; SOURCE LINE # 352 
0002 D2A2           SETB   RS
                                           ; SOURCE LINE # 353 
0004 C2A5           CLR    RW
                                           ; SOURCE LINE # 354 
0006 D2A3           SETB   EN
                                           ; SOURCE LINE # 355 
0008 C2A3           CLR    EN
                                           ; SOURCE LINE # 356 
000A 120000  R      LCALL  LcdBusy
000D 22             RET    

            ; FUNCTION _LcdWriteChar (END)

            ; FUNCTION _LcdWriteStr (BEGIN)
              ; Register R0R4R5 is assigned to parameter var
                                           ; SOURCE LINE # 361 
0000 EB             MOV    A,R3
0001 FD             MOV    R5,A
0002 EA             MOV    A,R2
0003 FC             MOV    R4,A
0004 E9             MOV    A,R1
0005 F8             MOV    R0,A
0006         ?WHILE9:
                                           ; SOURCE LINE # 360 
0006 ED             MOV    A,R5
0007 FB             MOV    R3,A
0008 EC             MOV    A,R4
0009 FA             MOV    R2,A
000A E8             MOV    A,R0
000B F9             MOV    R1,A
000C 120000  R      LCALL  IPGN1?C
000F 6015           JZ     ?NXT45
                                           ; SOURCE LINE # 361 
0011 ED             MOV    A,R5
0012 FB             MOV    R3,A
0013 EC             MOV    A,R4
0014 FA             MOV    R2,A
0015 E8             MOV    A,R0
0016 F9             MOV    R1,A
0017 08             INC    R0
0018 E8             MOV    A,R0
0019 7002           JNZ    ?LAB40
001B 0C             INC    R4
001C EC             MOV    A,R4
001D         ?LAB40:
001D 120000  R      LCALL  IPGN1?C
0020 FF             MOV    R7,A
0021 120000  R      LCALL  _LcdWriteChar
0024 80E0           SJMP   ?WHILE9
0026         ?NXT45:
0026 22             RET    

            ; FUNCTION _LcdWriteStr (END)

            ; FUNCTION _LcdGotoXY (BEGIN)
              ; Register R6 is assigned to parameter row
                                           ; SOURCE LINE # 377 
0000 8F06           MOV    AR6,R7
              ; Register R5 is assigned to parameter col
                                           ; SOURCE LINE # 366 
0002 EE             MOV    A,R6
0003 14             DEC    A
0004 600A           JZ     ?CASE4
0006 14             DEC    A
0007 600F           JZ     ?CASE5
0009 14             DEC    A
000A 6014           JZ     ?CASE6
000C 14             DEC    A
000D 6019           JZ     ?CASE7
000F 22             RET    
0010         ?CASE4:
                                           ; SOURCE LINE # 368 
0010 ED             MOV    A,R5
0011 247F           ADD    A,#07FH
0013 FF             MOV    R7,A
0014 120000  R      LCALL  _LcdWriteCmd
0017 22             RET    
0018         ?CASE5:
                                           ; SOURCE LINE # 369 
0018 ED             MOV    A,R5
0019 24BF           ADD    A,#0BFH
001B FF             MOV    R7,A
001C 120000  R      LCALL  _LcdWriteCmd
001F 22             RET    
0020         ?CASE6:
                                           ; SOURCE LINE # 370 
0020 ED             MOV    A,R5
0021 2493           ADD    A,#093H
0023 FF             MOV    R7,A
0024 120000  R      LCALL  _LcdWriteCmd
0027 22             RET    
0028         ?CASE7:
                                           ; SOURCE LINE # 371 
0028 ED             MOV    A,R5
0029 24D3           ADD    A,#0D3H
002B FF             MOV    R7,A
002C 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 377 
002F 22             RET    

            ; FUNCTION _LcdGotoXY (END)

            ; FUNCTION LcdClear (BEGIN)
                                           ; SOURCE LINE # 383 
0000 7F01           MOV    R7,#001H
0002 120000  R      LCALL  _LcdWriteCmd
              ; R7 is assigned to h
                                           ; SOURCE LINE # 384 
0005 7F00           MOV    R7,#000H
0007         ?FOR5:
                                           ; SOURCE LINE # 385 
0007 120000  R      LCALL  DelayUs
                                           ; SOURCE LINE # 384 
000A 0F             INC    R7
000B BF64F9         CJNE   R7,#064H,?FOR5
000E 22             RET    

            ; FUNCTION LcdClear (END)

C51 COMPILER V6.11.3B,  MAIN                      07/06/111  13:42:24  PAGE  3

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====

Key1 . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
Key2 . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0001H   1    
i. . . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0002H   1    
g. . . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0003H   1    
isInit . . . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0000H   1    
finish . . . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0001H   1    
Stop . . . . . . . . . . . . . . . . .  PUBLIC  IDATA   ARRAY   0000H   8    
cnt. . . . . . . . . . . . . . . . . .  PUBLIC  DATA    CHAR    0004H   1    
main . . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
PCATimers. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
KeyInt . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LongToAscii. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  Value?050. . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   4    
  Value?050. . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   4    
isDivisible?051. . . . . . . . . . . .  PUBLIC  DATA    BIT     0000H   1    
Divisor?052. . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0004H   4    
k?053. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0008H   1    
Q?054. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0009H   1    
Convert. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  NegEdge?055. . . . . . . . . . . . .  PARAM   DATA    U_INT  0000H   2    
  NegEdge?055. . . . . . . . . . . . .  PARAM   DATA    U_INT  0000H   2    
pw?056 . . . . . . . . . . . . . . . .  PUBLIC  DATA    U_INT  0000H   2    
time?057 . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   4    
wPart?058. . . . . . . . . . . . . . .  PUBLIC  DATA    LONG    0004H   4    
fPart?059. . . . . . . . . . . . . . .  PUBLIC  DATA    U_INT  0008H   2    
decimal?060. . . . . . . . . . . . . .  PUBLIC  DATA    U_INT  0000H   2    
DelayUs. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
DelayMs. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdInit. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdBusy. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdWriteCmd. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?063. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  var?063. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
LcdWriteChar . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?064. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  var?064. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
LcdWriteStr. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?065. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
  var?065. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
LcdGotoXY. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  row?066. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  col?067. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0001H   1    
  row?066. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  col?067. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0001H   1    
LcdClear . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
h?068. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
C51 COMPILER V6.11.3B,  MAIN                      07/06/111  13:42:24  PAGE  4



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1020    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5      21
   IDATA SIZE       =      8    ----
   BIT SIZE         =      2       1
END OF MODULE INFORMATION.

C51 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
