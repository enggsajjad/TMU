C51 COMPILER V6.11.3B,  MAIN                      08/22/111  08:36:47  PAGE  1

QCW(0x00002D1A)

WIN32 C51 COMPILER V6.11.3B, COMPILATION OF MODULE MAIN      
OBJECT MODULE PLACED IN f:\uc4.0_tester\main.obj
COMPILER INVOKED BY: C51.EXE F:\UC4.0_TESTER\MAIN.C OBJECT(F:\UC4.0_TESTER\MAIN.
            -OBJ) PIN(C:\FSI\INC) NOAM PR(F:\UC4.0_TESTER\MAIN.LST) CD SB OE(1) 
            -SM FP(NOFLOAT) PW(80) 

stmt level    source
   1          /*Version:	TMU1.1b
   2            
   3            The Project is AT89C51RC2 Based project, it measures the width o
            -f the pulse (mas = 100msec)
   4            using Programmable Counter Arrays (PCA).The LCD 8 bit Interface 
            -with Busy Flag Technique is
   5            incorporated for display. The results can either be display on L
            -CD, or being logged  to  PC
   6            serially at the buadrate of 19200. A button is used to make the 
            -system Ready.
   7           
   8            Programmer:	Sajjad Hussain, SE, SDPD, ICCC, 12-11-2008.
   9          
  10            Simulted: 	Proteus 7.0
  11            
  12            Crystal	22118400
  13            Serial BaudRate 	19200 clocked at 22118400
  14            Timers					clocked at 22118400
  15            PCA Timers			clocked at 614400	(Timer0  22118400/12/3)
  16            Measureable Time	106.7ms
  17          
  18            
  19            Modified:	12-12-2010
  20            
  21              PCA Timers			clocked at 460800	(Timer0  22118400/12/4)
  22              Measureable Time	  142.2ms
  23              
  24            Start Pulse                              ____________________
  25            																					|
  26            																					|
  27            																					|_____________________________________
  28            Stop Pulse 1                         		     							 ____________
            -________
  29            																							|
  30            																							|
  31          							   		_______________________________________|
  32            Stop Pulse 1  	 	                      		     							 __________
            -__________
  33          	  																							|
  34            																								|
  35          							   			_______________________________________|
  36          
  37            Modified: 06-07-2011
  38            	PCA 0-3			Stop Channels
  39            	PCA 4				Start Channel
  40            	One Digit after Decimal Point
  41            	Serial Port Removed
  42          */
  43          #include "at89c51rc2.h"
  44          #define Putc LcdWriteChar
  45          
  46          //Pins Assignments
  47          sbit BKLT = P2^4;//3; 
  48          sbit RS  = P2^2;//4; 
  49          sbit RW  = P2^5;
  50          sbit EN  = P2^3;//6;
  51          sbit LED = P2^7;
  52          sbit BS  = P0^7;
  53          
  54          sbit uc1  = P1^0;
  55          sbit uc2  = P1^1;
  56          
  57          sbit Pin8 = P3^0;
  58          sbit Pin7 = P3^1;
  59          
  60          unsigned char Key1,Key2,i,g;
  61          bit isInit=0,finish;
  62          bit flag2 = 0;
  63          //idata unsigned int PosEdge[4],NegEdge[4];
  64          idata unsigned int Stop[4];
  65          char cnt=0;
  66          unsigned char s=0;
  67          unsigned char delay_time=0;
  68          unsigned char delay_time_pre=0;
  69          
  70          //Function Prototypes
  71          void LcdInit();
  72          void DelayUs(void);
  73          void DelayMs(void);
  74          void Delay1Ms(void);
  75          void Delay10Ms(void);
  76          void LcdClear(void);
  77          void LcdWriteStr(char *var);
  78          void LcdWriteCmd(unsigned char c);
  79          void LcdWriteChar(unsigned char var);
  80          void LongToAscii(unsigned long Value);
  81          
  82          void LcdGotoXY(unsigned char r,unsigned char c);
  83          void Convert(unsigned int NegEdge);
  84          
  85          // Main Program Starts Here
  86          void main()
  87          {
  88   1      	// Configure the Serial Port
  89   1      	// Initialize 8051 registers
  90   1         SCON 		= 0x40;//0x50;			 // REN = 0;
  91   1         BDRCON 	&=0xEC;               // BRR=0; SRC=0;
  92   1         BDRCON 	|=0x0C;               // TBCK=1;RBCK=1; SPD=0
  93   1         BRL		=0xFA;                // =-6 for 9600 Bds at 22.1184MHz
  94   1         BDRCON 	|=0x10;               // Baud rate generator run
  95   1         ES = 0;
  96   1         
  97   1         // Set Priority of PCA Highest
  98   1      	IPH0 = 0x40;
  99   1      	IPL0 = 0x40;
 100   1      	// Set External Interrupt Settings
 101   1      	EX0 = 1;
 102   1      	IT0 = 1;
 103   1      	EX1 = 1;
 104   1      	IT1 = 1;
 105   1      		
 106   1      	// Set Timer0 used as Clock for PCA
 107   1      	TMOD = 0x12;
 108   1      	TL0  = 0xFC;// Divide by 4
 109   1      	TH0  = 0xFC;// 
 110   1      	TR0  = 1;
 111   1              
 112   1      	// Set PCA Module and PCA Interrupt
 113   1      	CCON = 0x00;// stop timre, clear flags
 114   1      	CMOD = 0x04;// PCA Count Pulse Select
 115   1      	CH = 0;CL = 0; // Clear PCA Timer Registers
 116   1      	CCAPM0 = 0;	//Positive Edge Stop Pulse 1
 117   1      	CCAPM1 = 0;	//Positive Edge Stop Pulse 2
 118   1      	CCAPM2 = 0;	//Positive Edge Stop Pulse 3
 119   1      	CCAPM3 = 0; //Positive Edge Stop Pulse 4
 120   1      	CCAPM4 = 0; //Negative Edge Start Pulse
 121   1      
 122   1      	LED = 0;
 123   1      	// Enable Interrupts
 124   1      	//IEN0 = IEN0 | 0xC1;
 125   1      	EC = 1;
 126   1      	EA = 1;
 127   1         
 128   1         uc1 = 0;
 129   1      	uc2 = 0;   
 130   1      	
 131   1         // Initial Screen
 132   1         delay_time = Pin7;
 133   1      	delay_time = (delay_time<<1)+Pin8;
 134   1      	delay_time_pre = delay_time;
 135   1      	
 136   1      	LcdInit();
 137   1      	LcdGotoXY(1,1);
 138   1      	LcdWriteStr("Time  Measuring");
 139   1      	LcdGotoXY(2,1);
 140   1      	LcdWriteStr(" Unit (TMU-01)");	
 141   1      	LcdGotoXY(3,1);
 142   1      	LcdWriteStr("Range: 1-135ms");
 143   1      	LcdGotoXY(4,2);		
 144   1      	switch(delay_time)
 145   1      	{
 146   2      		case 1:
 147   2      			LcdWriteStr("Delay =  10ms");
 148   2      			break;
 149   2      		case 3:
 150   2      			LcdWriteStr("Delay =  50ms");
 151   2      			break;
 152   2      		case 2:
 153   2      			LcdWriteStr("Delay = 100ms");
 154   2      			break;
 155   2      	}
 156   1         // Initial Screen
 157   1      	isInit = 1;
 158   1      	
 159   1      	//Running Forever
 160   1      	while(1)
 161   1      	{
 162   2      		// For Local LCD Display
 163   2      		if(finish)
 164   2      		{
 165   3      			finish = 0;
 166   3      			LED = 0;
 167   3      			LcdClear();
 168   3      		 	for(i=0;i<4;i++)
 169   3      		 	{
 170   4      	 			LcdGotoXY(i+1,2);
 171   4      
 172   4      	 			LcdWriteStr("Ch#");
 173   4      
 174   4      	 			LcdWriteChar(i+49);
 175   4      
 176   4      	 			LcdWriteChar(':');
 177   4      
 178   4      		 		LcdWriteChar(' ');
 179   4      
 180   4       		 		//if(Stop[i]<0xEA00)//130
 181   4       		 		//if(Stop[i]<0xF300)//135
 182   4       		 		if(Stop[i]<0xFC00)//140
 183   4       		 		{
 184   5       		 			Convert(Stop[i]);
 185   5       		 			LcdWriteStr(" ms");
 186   5       		 		}
 187   4       		 		else
 188   4       		 		{
 189   5       		 			LcdWriteStr("Overflow");
 190   5      
 191   5       		 		}
 192   4      		 	}//for
 193   3      		}//finish
 194   2      		if(flag2)
 195   2      		{
 196   3      			flag2 = 0;
 197   3      			DelayMs();// De Bouncing
 198   3      		// Start Pulse Out
 199   3      		uc1 = 1;
 200   3      		//Delay10Ms();
 201   3      		for(s=0;s<8;s++)		// 9ms
 202   3      			Delay1Ms();
 203   3      		DelayUs();// 200usec adjustment
 204   3      		uc1 = 0;
 205   3      		//
 206   3      		delay_time = Pin7;
 207   3      		delay_time = (delay_time<<1)+Pin8;
 208   3      		
 209   3      		switch(delay_time)
 210   3      		{
 211   4      		 	case 1://10ms
 212   4      		 		DelayUs();// 200usec adjustment
 213   4      		 		//Delay1Ms();
 214   4      		 		break;
 215   4      		 	case 3://50ms
 216   4      		 		DelayUs();// 200usec adjustment
 217   4      		 		//Delay1Ms();
 218   4      		 		Delay10Ms();
 219   4      		 		Delay10Ms();
 220   4      		 		Delay10Ms();
 221   4      		 		Delay10Ms();
 222   4      		 		break;
 223   4      		 	case 2://100ms
 224   4      				//Delay1Ms();
 225   4         	 		for(s=0;s<9;s++)
 226   4      					Delay10Ms();
 227   4      		 		break;
 228   4      		 	case 0://135ms
 229   4      				//Delay1Ms();
 230   4      		 		for(s=0;s<12;s++)
 231   4      					Delay10Ms();
 232   4      				Delay1Ms();
 233   4      				Delay1Ms();
 234   4      				Delay1Ms();
 235   4      				Delay1Ms();
 236   4      				Delay1Ms();
 237   4      		 		break;
 238   4      		}
 239   3      		// Stop Pulse Out
 240   3      		uc2 = 1;
 241   3      		Delay10Ms();
 242   3      		uc2 = 0;
 243   3      
 244   3      		}
 245   2      		
 246   2      		/*
 247   2      		//Running Forever
 248   2      		delay_time = Pin7;
 249   2      		delay_time = (delay_time<<1)+Pin8;
 250   2      		if(delay_time_pre !=delay_time)
 251   2      		{
 252   2      			for(s=0;s<9;s++)
 253   2      				Delay10Ms();
 254   2      			LcdGotoXY(4,4);		
 255   2      			switch(delay_time)
 256   2      			{
 257   2      				case 1:
 258   2      					LcdWriteStr("Delay = 10ms ");
 259   2      					break;
 260   2      				case 3:
 261   2      					LcdWriteStr("Delay = 50ms ");
 262   2      					break;
 263   2      				case 2:
 264   2      					LcdWriteStr("Delay = 100ms");
 265   2      					break;
 266   2      			}
 267   2      		}
 268   2      		delay_time_pre = delay_time;
 269   2             */
 270   2      	}//while
 271   1      }//main
 272          
 273          // Interrupt Routines
 274          void PCATimers() interrupt 6  using 1
 275          {
 276   1      	if(CF)
 277   1      	{
 278   2      		CCON = 0x00; // Stop Timer, Clear CF Flag
 279   2      	 	CMOD = 0x04;
 280   2      	 	finish = 1;
 281   2      	}//Cf
 282   1      	//Start Pulse
 283   1      	if(CCF4)
 284   1      	{
 285   2      		CCF4 = 0;
 286   2      		CCAPM4 = 0x00;				// Disable ECCFn bit
 287   2      		
 288   2      		CCAPM0 = 0x11; 			//Negative Edge	Stop Pulse 1
 289   2      		CCAPM1 = 0x11;				//Negative Edge	Stop Pulse 2
 290   2      		CCAPM2 = 0x11;				//Negative Edge	Stop Pulse 3
 291   2      		CCAPM3 = 0x11; 			//Negative Edge	Stop Pulse 4
 292   2      		CL =0; CH =0;				// Reset the Timer Registers
 293   2      		CMOD = 0x05;				// Enable Overflow Interrupt
 294   2      		CR = 1;						// Run PCA Timer
 295   2      	}
 296   1      	//Stop Pulse 4
 297   1      	if(CCF0)
 298   1      	{
 299   2      		CCF0 = 0;
 300   2       		Stop[3] = CCAP0L | (CCAP0H<<8);
 301   2       		CCAPM0 = 0x00;
 302   2      	}
 303   1      	//Stop Pulse 3
 304   1      	if(CCF1)
 305   1      	{
 306   2      		CCF1 = 0;
 307   2      		Stop[2] = CCAP1L | (CCAP1H<<8);
 308   2      		CCAPM1 = 0x00;
 309   2      	}
 310   1      	//Stop Pulse 2
 311   1      	if(CCF2)
 312   1      	{
 313   2      		CCF2 = 0;
 314   2       		Stop[1] = CCAP2L | (CCAP2H<<8);
 315   2      		CCAPM2 = 0x00;
 316   2      	}
 317   1      	//Stop Pulse 1
 318   1      	if(CCF3)
 319   1      	{
 320   2      		CCF3 = 0;
 321   2      		Stop[0] = CCAP3L | (CCAP3H<<8);
 322   2       		CCAPM3 = 0x00;
 323   2      	}	
 324   1      }
 325          
 326          void KeyInt() interrupt 0 
 327          {  
 328   1      	if(isInit)
 329   1      	{
 330   2      		DelayMs();
 331   2      		LcdClear();
 332   2      		LcdGotoXY(2,4);
 333   2      		LcdWriteStr("TMU Ready");
 334   2      		LED = 1;
 335   2      		Stop[0] = 0;
 336   2      		Stop[1] = 0;
 337   2      		Stop[2] = 0;
 338   2      		Stop[3] = 0;
 339   2      		CL =0;CH =0;
 340   2      		CCON = 0x00;// stop timre, clear flags
 341   2      		CMOD = 0x04;// PCA Count Pulse Select
 342   2      		CCAPM4 = 0x21;	//Positive Edge Start Pulse
 343   2      	}//if Init
 344   1      }
 345          void KeyInt2() interrupt 2 
 346          {  
 347   1      	if(isInit)
 348   1      	{
 349   2      		//flag2 = 1;
 350   2      		DelayMs();// De Bouncing
 351   2      		// Start Pulse Out
 352   2      		uc1 = 1;
 353   2      		//Delay10Ms();
 354   2      		for(s=0;s<8;s++)		// 9ms
 355   2      			Delay1Ms();
 356   2      		DelayUs();// 200usec adjustment
 357   2      		uc1 = 0;
 358   2      		//
 359   2      		delay_time = Pin7;
 360   2      		delay_time = (delay_time<<1)+Pin8;
 361   2      		
 362   2      		switch(delay_time)
 363   2      		{
 364   3      		 	case 1://10ms
 365   3      		 		DelayUs();// 200usec adjustment
 366   3      		 		//Delay1Ms();
 367   3      		 		break;
 368   3      		 	case 3://50ms
 369   3      		 		DelayUs();// 200usec adjustment
 370   3      		 		//Delay1Ms();
 371   3      		 		Delay10Ms();
 372   3      		 		Delay10Ms();
 373   3      		 		Delay10Ms();
 374   3      		 		Delay10Ms();
 375   3      		 		break;
 376   3      		 	case 2://100ms
 377   3      				//Delay1Ms();
 378   3         	 		for(s=0;s<9;s++)
 379   3      					Delay10Ms();
 380   3      		 		break;
 381   3      		 	case 0://135ms
 382   3      				//Delay1Ms();
 383   3      		 		for(s=0;s<12;s++)
 384   3      					Delay10Ms();
 385   3      				Delay1Ms();
 386   3      				Delay1Ms();
 387   3      				Delay1Ms();
 388   3      				Delay1Ms();
 389   3      				Delay1Ms();
 390   3      		 		break;
 391   3      		}
 392   2      		// Stop Pulse Out
 393   2      		uc2 = 1;
 394   2      		Delay10Ms();
 395   2      		uc2 = 0;
 396   2      	}
 397   1      }
 398          
 399          
 400          // Function Definitions
 401          
 402          void LongToAscii(unsigned long Value)
 403          {
 404   1       //Handles Upto 10 Digits
 405   1       bit isDivisible=0;
 406   1       unsigned long Divisor = 1000000000;
 407   1       unsigned char k;
 408   1       unsigned char Q;
 409   1       if(Value==0)	
 410   1       {
 411   2       	Putc('0');
 412   2       	return;
 413   2       }
 414   1       for(k=0;k<10;k++)
 415   1       {
 416   2       	if (Divisor<=Value) isDivisible=1;
 417   2      	if(isDivisible)
 418   2       	{
 419   3        	   Q = (unsigned char )(Value/Divisor);
 420   3        		LcdWriteChar(Q+48); 
 421   3       		Value = Value - (Q)*Divisor;
 422   3      	}//End if (isDivisible)
 423   2      	Divisor = Divisor/10;
 424   2       }//End for
 425   1      }
 426          
 427          void Convert(unsigned int NegEdge)
 428          {
 429   1      //unsigned char temp;
 430   1      unsigned int pw;
 431   1      unsigned long time;
 432   1      long wPart;
 433   1      unsigned int fPart;
 434   1      unsigned int decimal;
 435   1      decimal = 1000;
 436   1      
 437   1      			pw = NegEdge;
 438   1      			time = (unsigned long) pw;
 439   1      			time = time *10;
 440   1      			wPart = (time/4608);
 441   1      			time = time*decimal;
 442   1      			time = time/4608;
 443   1      			fPart = (int)(time - wPart*decimal);
 444   1      			LongToAscii(wPart);
 445   1      
 446   1      			Putc('.');
 447   1      
 448   1      			
 449   1      			Putc((fPart/100)+48);
 450   1      
 451   1      			/*decimal=decimal/10;
 452   1      			while(fPart<decimal)
 453   1      			{
 454   1      				if(comm)
 455   1      					SendChar('0');
 456   1      				else
 457   1      				 	Putc('0');
 458   1      			 	decimal=decimal/10;
 459   1      			}
 460   1      			
 461   1      			LongToAscii(fPart,comm);
 462   1      			
 463   1              if(comm=0)
 464   1              {
 465   1      			Putc(' ');
 466   1      			temp = pw/10000; 
 467   1      			pw = pw-temp*10000;
 468   1      			Putc((temp)+48);
 469   1      		
 470   1      			temp = pw/1000; 
 471   1      			pw = pw-temp*1000;
 472   1      			Putc((temp)+48);
 473   1      			
 474   1      			temp = pw/100; 
 475   1      			pw = pw-temp*100;
 476   1      			Putc((temp)+48);
 477   1      			
 478   1      			temp = pw/10; 
 479   1      			pw = pw-temp*10;
 480   1      			Putc((temp)+48);
 481   1      			
 482   1      			Putc((pw)+48);
 483   1      			}*/
 484   1      }
 485          
 486          void DelayUs(void)
 487          {
 488   1      	TL1 = 0x90;TH1 = 0xFE;//200 usec at 22.1184MHz
 489   1      	//TL1 = 0x48;TH1 = 0xFF;//100 usec at 22.1184MHz
 490   1      	//TL1 = 0xA4;TH1 = 0xFF;//50 usec at 22.1184MHz
 491   1      	//TL1 = 0xD2;TH1 = 0xFF;//25 usec at 22.1184MHz
 492   1      	//TL1 = 0xF7;TH1 = 0xFF;//5 usec at 22.1184MHz
 493   1      	//TL1 = 0xEE;TH1 = 0xFF;//10 usec at 22.1184MHz
 494   1      	TR1  = 1;
 495   1      	while(!TF1);
 496   1      	TR1  = 0;
 497   1      	TF1  = 0;
 498   1      }
 499          void Delay10Ms(void)
 500          {
 501   1      	TL1 = 0x00;TH1 = 0xB8;//10ms at 22.1184MHz
 502   1      	TR1  = 1;
 503   1      	while(!TF1);
 504   1      	TR1  = 0;
 505   1      	TF1  = 0;
 506   1      }
 507          void Delay1Ms(void)
 508          {
 509   1      	TL1 = 0xCD;TH1 = 0xF8;//1ms at 22.1184MHz
 510   1      	TR1  = 1;
 511   1      	while(!TF1);
 512   1      	TR1  = 0;
 513   1      	TF1  = 0;
 514   1      }
 515          
 516          void DelayMs(void)
 517          {
 518   1      	TL1 = 0x00;TH1 = 0x04;//35ms at 22.1184MHz
 519   1      	TR1  = 1;
 520   1      	while(!TF1);
 521   1      	TR1  = 0;
 522   1      	TF1  = 0;
 523   1      }
 524          // 8bit LCD Interface
 525          void LcdInit()
 526          {
 527   1         LcdWriteCmd(0x38);	//Function Set 0x38
 528   1         LcdWriteCmd(0x38);	//Function Set
 529   1         LcdWriteCmd(0x38);	//Function Set
 530   1      	LcdWriteCmd(0x06);	//Entry Mode Set 0x06
 531   1         LcdWriteCmd(0x0C);	//Display On  Off Control 0x0C
 532   1      }
 533          
 534          void LcdBusy()
 535          {
 536   1      	BS   = 1;			//Make D7th bit of LCD as i/p
 537   1         EN   = 1;         //Make port pin as o/p
 538   1         RS   = 0;         //Selected command register
 539   1         RW   = 1;         //We are reading
 540   1         while(BS)
 541   1         {   					//read busy flag again and again till it becomes 0 Ena
            -ble H->L
 542   2         	EN   = 0;
 543   2            EN   = 1;
 544   2         }
 545   1      }
 546          void LcdWriteCmd(unsigned char var)
 547          {
 548   1      	P0 = var;      	//Commands to be Written
 549   1         RS   = 0;        	//Selected command register
 550   1         RW   = 0;        	//We are writing in instruction register
 551   1         EN   = 1;        	//Enable H->L
 552   1         EN   = 0;
 553   1         LcdBusy();      //Wait for LCD to process the command
 554   1      }
 555          void LcdWriteChar(unsigned char var)
 556          {
 557   1      	P0 = var;      	//Data/Character to be Written
 558   1         RS   = 1;         //Selected data register
 559   1         RW   = 0;         //We are writing
 560   1         EN   = 1;         //Enable H->L
 561   1         EN   = 0;
 562   1         LcdBusy();      //Wait for LCD to process the command
 563   1      }
 564          void LcdWriteStr(char *var)
 565          {
 566   1      	while(*var)       //till string ends send characters one by one
 567   1         	LcdWriteChar(*var++);
 568   1      }
 569          
 570          void LcdGotoXY(unsigned char row, unsigned char col)
 571          {
 572   1      	switch (row)
 573   1      	{
 574   2      		/*case 1: LcdWriteCmd(0x80 + col - 1); break;
 575   2      		case 2: LcdWriteCmd(0xc0 + col - 1); break;
 576   2      		case 3: LcdWriteCmd(0x94 + col - 1); break;
 577   2      		case 4: LcdWriteCmd(0xd4 + col - 1); break;
 578   2      		*/
 579   2      		case 1: LcdWriteCmd(0x80 + col - 1); break;
 580   2      		case 2: LcdWriteCmd(0xc0 + col - 1); break;
 581   2      		case 3: LcdWriteCmd(0x90 + col - 1); break;
 582   2      		case 4: LcdWriteCmd(0xd0 + col - 1); break;
 583   2      		default: break;
 584   2      	}
 585   1      }
 586          void LcdClear()
 587          {
 588   1       unsigned char h;
 589   1       LcdWriteCmd(0x01);
 590   1       for(h=0;h<100;h++)
 591   1      		DelayUs();
 592   1      }
 593          
 594          
 595          
 596          
 597          
 598          
 599          
 600          
 601          
 602          
 603          
 604          
 605          
C51 COMPILER V6.11.3B,  MAIN                      08/22/111  08:36:47  PAGE  2

ASSEMBLY LISTING OF GENERATED OBJECT CODE

            ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 90 
0000 759840         MOV    SCON,#040H
                                           ; SOURCE LINE # 91 
0003 539BEC         ANL    BDRCON,#0ECH
                                           ; SOURCE LINE # 92 
0006 439B0C         ORL    BDRCON,#00CH
                                           ; SOURCE LINE # 93 
0009 759AFA         MOV    BRL,#0FAH
                                           ; SOURCE LINE # 94 
000C 439B10         ORL    BDRCON,#010H
                                           ; SOURCE LINE # 95 
000F C2AC           CLR    ES
                                           ; SOURCE LINE # 98 
0011 75B740         MOV    IPH0,#040H
                                           ; SOURCE LINE # 99 
0014 75B840         MOV    IPL0,#040H
                                           ; SOURCE LINE # 101 
0017 D2A8           SETB   EX0
                                           ; SOURCE LINE # 102 
0019 D288           SETB   IT0
                                           ; SOURCE LINE # 103 
001B D2AA           SETB   EX1
                                           ; SOURCE LINE # 104 
001D D28A           SETB   IT1
                                           ; SOURCE LINE # 107 
001F 758912         MOV    TMOD,#012H
                                           ; SOURCE LINE # 108 
0022 758AFC         MOV    TL0,#0FCH
                                           ; SOURCE LINE # 109 
0025 758CFC         MOV    TH0,#0FCH
                                           ; SOURCE LINE # 110 
0028 D28C           SETB   TR0
                                           ; SOURCE LINE # 113 
002A 75D800         MOV    CCON,#000H
                                           ; SOURCE LINE # 114 
002D 75D904         MOV    CMOD,#004H
                                           ; SOURCE LINE # 115 
0030 75F900         MOV    CH,#000H
0033 75E900         MOV    CL,#000H
                                           ; SOURCE LINE # 116 
0036 75DA00         MOV    CCAPM0,#000H
                                           ; SOURCE LINE # 117 
0039 75DB00         MOV    CCAPM1,#000H
                                           ; SOURCE LINE # 118 
003C 75DC00         MOV    CCAPM2,#000H
                                           ; SOURCE LINE # 119 
003F 75DD00         MOV    CCAPM3,#000H
                                           ; SOURCE LINE # 120 
0042 75DE00         MOV    CCAPM4,#000H
                                           ; SOURCE LINE # 122 
0045 C2A7           CLR    LED
                                           ; SOURCE LINE # 125 
0047 D2AE           SETB   EC
                                           ; SOURCE LINE # 126 
0049 D2AF           SETB   EA
                                           ; SOURCE LINE # 128 
004B C290           CLR    uc1
                                           ; SOURCE LINE # 129 
004D C291           CLR    uc2
                                           ; SOURCE LINE # 132 
004F A2B1           MOV    C,Pin7
0051 E4             CLR    A
0052 33             RLC    A
0053 F500    R      MOV    delay_time,A
                                           ; SOURCE LINE # 133 
0055 C3             CLR    C
0056 33             RLC    A
0057 FB             MOV    R3,A
0058 A2B0           MOV    C,Pin8
005A E4             CLR    A
005B 33             RLC    A
005C 2B             ADD    A,R3
005D F500    R      MOV    delay_time,A
                                           ; SOURCE LINE # 134 
005F 850000  R      MOV    delay_time_pre,delay_time
                                           ; SOURCE LINE # 136 
0062 120000  R      LCALL  LcdInit
                                           ; SOURCE LINE # 137 
0065 7F01           MOV    R7,#001H
0067 7D01           MOV    R5,#001H
0069 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 138 
006C 7B05           MOV    R3,#005H
006E 7A00    R      MOV    R2,#000H
0070 7900    R      MOV    R1,#000H
0072 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 139 
0075 7F02           MOV    R7,#002H
0077 7D01           MOV    R5,#001H
0079 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 140 
007C 7B05           MOV    R3,#005H
007E 7A00    R      MOV    R2,#000H
0080 7900    R      MOV    R1,#000H
0082 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 141 
0085 7F03           MOV    R7,#003H
0087 7D01           MOV    R5,#001H
0089 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 142 
008C 7B05           MOV    R3,#005H
008E 7A00    R      MOV    R2,#000H
0090 7900    R      MOV    R1,#000H
0092 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 143 
0095 7F04           MOV    R7,#004H
0097 7D02           MOV    R5,#002H
0099 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 144 
009C E500    R      MOV    A,delay_time
009E 14             DEC    A
009F 6008           JZ     ?CASE7
00A1 14             DEC    A
00A2 601B           JZ     ?CASE8
00A4 14             DEC    A
00A5 600D           JZ     ?CASE9
00A7 801F           SJMP   ?NXT14
00A9         ?CASE7:
                                           ; SOURCE LINE # 147 
00A9 7B05           MOV    R3,#005H
00AB 7A00    R      MOV    R2,#000H
00AD 7900    R      MOV    R1,#000H
00AF 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 148 
00B2 8014           SJMP   ?NXT14
00B4         ?CASE9:
                                           ; SOURCE LINE # 150 
00B4 7B05           MOV    R3,#005H
00B6 7A00    R      MOV    R2,#000H
00B8 7900    R      MOV    R1,#000H
00BA 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 151 
00BD 8009           SJMP   ?NXT14
00BF         ?CASE8:
                                           ; SOURCE LINE # 153 
00BF 7B05           MOV    R3,#005H
00C1 7A00    R      MOV    R2,#000H
00C3 7900    R      MOV    R1,#000H
00C5 120000  R      LCALL  _LcdWriteStr
00C8         ?NXT14:
                                           ; SOURCE LINE # 157 
00C8 D200    R      SETB   isInit
00CA         ?WHILE1:
                                           ; SOURCE LINE # 163 
00CA 300067  R      JNB    finish,?NXT16
                                           ; SOURCE LINE # 165 
00CD C200    R      CLR    finish
                                           ; SOURCE LINE # 166 
00CF C2A7           CLR    LED
                                           ; SOURCE LINE # 167 
00D1 120000  R      LCALL  LcdClear
                                           ; SOURCE LINE # 168 
00D4 750000  R      MOV    i,#000H
00D7         ?FOR4:
00D7 E500    R      MOV    A,i
00D9 B40400         CJNE   A,#004H,?LAB14
00DC         ?LAB14:
00DC 5056           JNC    ?NXT16
                                           ; SOURCE LINE # 170 
00DE E500    R      MOV    A,i
00E0 04             INC    A
00E1 FF             MOV    R7,A
00E2 7D02           MOV    R5,#002H
00E4 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 172 
00E7 7B05           MOV    R3,#005H
00E9 7A00    R      MOV    R2,#000H
00EB 7900    R      MOV    R1,#000H
00ED 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 174 
00F0 E500    R      MOV    A,i
00F2 2431           ADD    A,#031H
00F4 FF             MOV    R7,A
00F5 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 176 
00F8 7F3A           MOV    R7,#03AH
00FA 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 178 
00FD 7F20           MOV    R7,#020H
00FF 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 182 
0102 E500    R      MOV    A,i
0104 23             RL     A
0105 7900    R      MOV    R1,#Stop
0107 2400    R      ADD    A,#Stop
0109 F8             MOV    R0,A
010A B6FC00         CJNE   @R0,#0FCH,?LAB16
010D         ?LAB16:
010D 5018           JNC    ?ELSE4
                                           ; SOURCE LINE # 184 
010F E500    R      MOV    A,i
0111 23             RL     A
0112 29             ADD    A,R1
0113 F8             MOV    R0,A
0114 8606           MOV    AR6,@R0
0116 08             INC    R0
0117 8607           MOV    AR7,@R0
0119 120000  R      LCALL  _Convert
                                           ; SOURCE LINE # 185 
011C 7B05           MOV    R3,#005H
011E 7A00    R      MOV    R2,#000H
0120 7900    R      MOV    R1,#000H
0122 120000  R      LCALL  _LcdWriteStr
0125 8009           SJMP   ?NXT18
0127         ?ELSE4:
                                           ; SOURCE LINE # 189 
0127 7B05           MOV    R3,#005H
0129 7A00    R      MOV    R2,#000H
012B 7900    R      MOV    R1,#000H
012D 120000  R      LCALL  _LcdWriteStr
0130         ?NXT18:
                                           ; SOURCE LINE # 168 
0130 0500    R      INC    i
0132 80A3           SJMP   ?FOR4
0134         ?NXT16:
                                           ; SOURCE LINE # 194 
0134 300093  R      JNB    flag2,?WHILE1
                                           ; SOURCE LINE # 196 
0137 C200    R      CLR    flag2
                                           ; SOURCE LINE # 197 
0139 120000  R      LCALL  DelayMs
                                           ; SOURCE LINE # 199 
013C D290           SETB   uc1
                                           ; SOURCE LINE # 201 
013E 750000  R      MOV    s,#000H
0141         ?FOR5:
0141 E500    R      MOV    A,s
0143 B40800         CJNE   A,#008H,?LAB18
0146         ?LAB18:
0146 5007           JNC    ?NXT21
                                           ; SOURCE LINE # 202 
0148 120000  R      LCALL  Delay1Ms
                                           ; SOURCE LINE # 201 
014B 0500    R      INC    s
014D 80F2           SJMP   ?FOR5
014F         ?NXT21:
                                           ; SOURCE LINE # 203 
014F 120000  R      LCALL  DelayUs
                                           ; SOURCE LINE # 204 
0152 C290           CLR    uc1
                                           ; SOURCE LINE # 206 
0154 A2B1           MOV    C,Pin7
0156 E4             CLR    A
0157 33             RLC    A
0158 F500    R      MOV    delay_time,A
                                           ; SOURCE LINE # 207 
015A C3             CLR    C
015B 33             RLC    A
015C FB             MOV    R3,A
015D A2B0           MOV    C,Pin8
015F E4             CLR    A
0160 33             RLC    A
0161 2B             ADD    A,R3
0162 F500    R      MOV    delay_time,A
                                           ; SOURCE LINE # 209 
0164 E500    R      MOV    A,delay_time
0166 6032           JZ     ?CASE10
0168 14             DEC    A
0169 6008           JZ     ?CASE11
016B 14             DEC    A
016C 601B           JZ     ?CASE12
016E 14             DEC    A
016F 6007           JZ     ?CASE13
0171 8047           SJMP   ?NXT23
0173         ?CASE11:
                                           ; SOURCE LINE # 212 
0173 120000  R      LCALL  DelayUs
                                           ; SOURCE LINE # 214 
0176 8042           SJMP   ?NXT23
0178         ?CASE13:
                                           ; SOURCE LINE # 216 
0178 120000  R      LCALL  DelayUs
                                           ; SOURCE LINE # 218 
017B 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 219 
017E 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 220 
0181 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 221 
0184 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 222 
0187 8031           SJMP   ?NXT23
0189         ?CASE12:
                                           ; SOURCE LINE # 225 
0189 750000  R      MOV    s,#000H
018C         ?FOR6:
018C E500    R      MOV    A,s
018E B40900         CJNE   A,#009H,?LAB21
0191         ?LAB21:
0191 5027           JNC    ?NXT23
                                           ; SOURCE LINE # 226 
0193 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 201 
0196 0500    R      INC    s
0198 80F2           SJMP   ?FOR6
019A         ?CASE10:
                                           ; SOURCE LINE # 230 
019A 750000  R      MOV    s,#000H
019D         ?FOR7:
019D E500    R      MOV    A,s
019F B40C00         CJNE   A,#00CH,?LAB23
01A2         ?LAB23:
01A2 5007           JNC    ?NXT26
                                           ; SOURCE LINE # 231 
01A4 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 201 
01A7 0500    R      INC    s
01A9 80F2           SJMP   ?FOR7
01AB         ?NXT26:
                                           ; SOURCE LINE # 232 
01AB 120000  R      LCALL  Delay1Ms
                                           ; SOURCE LINE # 233 
01AE 120000  R      LCALL  Delay1Ms
                                           ; SOURCE LINE # 234 
01B1 120000  R      LCALL  Delay1Ms
                                           ; SOURCE LINE # 235 
01B4 120000  R      LCALL  Delay1Ms
                                           ; SOURCE LINE # 236 
01B7 120000  R      LCALL  Delay1Ms
01BA         ?NXT23:
                                           ; SOURCE LINE # 240 
01BA D291           SETB   uc2
                                           ; SOURCE LINE # 241 
01BC 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 242 
01BF C291           CLR    uc2
01C1 020000  R      LJMP   ?WHILE1

            ; FUNCTION main (END)

            ; FUNCTION PCATimers (BEGIN)
                                           ; SOURCE LINE # 322 
0000 C0E0           PUSH   ACC
0002 C0D0           PUSH   PSW
0004 75D008         MOV    PSW,#008H
                                           ; SOURCE LINE # 276 
0007 30DF08         JNB    CF,?NXT35
                                           ; SOURCE LINE # 278 
000A 75D800         MOV    CCON,#000H
                                           ; SOURCE LINE # 279 
000D 75D904         MOV    CMOD,#004H
                                           ; SOURCE LINE # 280 
0010 D200    R      SETB   finish
0012         ?NXT35:
                                           ; SOURCE LINE # 283 
0012 30DC1C         JNB    CCF4,?NXT36
                                           ; SOURCE LINE # 285 
0015 C2DC           CLR    CCF4
                                           ; SOURCE LINE # 286 
0017 75DE00         MOV    CCAPM4,#000H
                                           ; SOURCE LINE # 288 
001A 75DA11         MOV    CCAPM0,#011H
                                           ; SOURCE LINE # 289 
001D 75DB11         MOV    CCAPM1,#011H
                                           ; SOURCE LINE # 290 
0020 75DC11         MOV    CCAPM2,#011H
                                           ; SOURCE LINE # 291 
0023 75DD11         MOV    CCAPM3,#011H
                                           ; SOURCE LINE # 292 
0026 75E900         MOV    CL,#000H
0029 75F900         MOV    CH,#000H
                                           ; SOURCE LINE # 293 
002C 75D905         MOV    CMOD,#005H
                                           ; SOURCE LINE # 294 
002F D2DE           SETB   CR
0031         ?NXT36:
                                           ; SOURCE LINE # 297 
0031 30D812         JNB    CCF0,?NXT37
                                           ; SOURCE LINE # 299 
0034 C2D8           CLR    CCF0
                                           ; SOURCE LINE # 300 
0036 E5FA           MOV    A,CCAP0H
0038 FA             MOV    R2,A
0039 E5EA           MOV    A,CCAP0L
003B FD             MOV    R5,A
003C EA             MOV    A,R2
003D 7900    R      MOV    R1,#Stop+06H
003F F7             MOV    @R1,A
0040 09             INC    R1
0041 A70D           MOV    @R1,AR5
                                           ; SOURCE LINE # 301 
0043 75DA00         MOV    CCAPM0,#000H
0046         ?NXT37:
                                           ; SOURCE LINE # 304 
0046 30D912         JNB    CCF1,?NXT38
                                           ; SOURCE LINE # 306 
0049 C2D9           CLR    CCF1
                                           ; SOURCE LINE # 307 
004B E5FB           MOV    A,CCAP1H
004D FA             MOV    R2,A
004E E5EB           MOV    A,CCAP1L
0050 FD             MOV    R5,A
0051 EA             MOV    A,R2
0052 7900    R      MOV    R1,#Stop+04H
0054 F7             MOV    @R1,A
0055 09             INC    R1
0056 A70D           MOV    @R1,AR5
                                           ; SOURCE LINE # 308 
0058 75DB00         MOV    CCAPM1,#000H
005B         ?NXT38:
                                           ; SOURCE LINE # 311 
005B 30DA12         JNB    CCF2,?NXT39
                                           ; SOURCE LINE # 313 
005E C2DA           CLR    CCF2
                                           ; SOURCE LINE # 314 
0060 E5FC           MOV    A,CCAP2H
0062 FA             MOV    R2,A
0063 E5EC           MOV    A,CCAP2L
0065 FD             MOV    R5,A
0066 EA             MOV    A,R2
0067 7900    R      MOV    R1,#Stop+02H
0069 F7             MOV    @R1,A
006A 09             INC    R1
006B A70D           MOV    @R1,AR5
                                           ; SOURCE LINE # 315 
006D 75DC00         MOV    CCAPM2,#000H
0070         ?NXT39:
                                           ; SOURCE LINE # 318 
0070 30DB12         JNB    CCF3,?NXT41
                                           ; SOURCE LINE # 320 
0073 C2DB           CLR    CCF3
                                           ; SOURCE LINE # 321 
0075 E5FD           MOV    A,CCAP3H
0077 FA             MOV    R2,A
0078 E5ED           MOV    A,CCAP3L
007A FD             MOV    R5,A
007B EA             MOV    A,R2
007C 7900    R      MOV    R1,#Stop
007E F7             MOV    @R1,A
007F 09             INC    R1
0080 A70D           MOV    @R1,AR5
                                           ; SOURCE LINE # 322 
0082 75DD00         MOV    CCAPM3,#000H
0085         ?NXT41:
0085 D0D0           POP    PSW
0087 D0E0           POP    ACC
0089 32             RETI   

            ; FUNCTION PCATimers (END)

            ; FUNCTION KeyInt (BEGIN)
                                           ; SOURCE LINE # 342 
0000 C0E0           PUSH   ACC
0002 C0F0           PUSH   B
0004 C083           PUSH   DPH
0006 C082           PUSH   DPL
0008 C0D0           PUSH   PSW
000A C000           PUSH   AR0
000C C001           PUSH   AR1
000E C002           PUSH   AR2
0010 C003           PUSH   AR3
0012 C004           PUSH   AR4
0014 C005           PUSH   AR5
0016 C006           PUSH   AR6
0018 EF             MOV    A,R7
0019 C007           PUSH   AR7
                                           ; SOURCE LINE # 328 
001B 300039  R      JNB    isInit,?NXT45
                                           ; SOURCE LINE # 330 
001E 120000  R      LCALL  DelayMs
                                           ; SOURCE LINE # 331 
0021 120000  R      LCALL  LcdClear
                                           ; SOURCE LINE # 332 
0024 7F02           MOV    R7,#002H
0026 7D04           MOV    R5,#004H
0028 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 333 
002B 7B05           MOV    R3,#005H
002D 7A00    R      MOV    R2,#000H
002F 7900    R      MOV    R1,#000H
0031 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 334 
0034 D2A7           SETB   LED
                                           ; SOURCE LINE # 335 
0036 7900    R      MOV    R1,#Stop
0038 E4             CLR    A
0039 F7             MOV    @R1,A
003A 09             INC    R1
003B F7             MOV    @R1,A
                                           ; SOURCE LINE # 336 
003C 7900    R      MOV    R1,#Stop+02H
003E F7             MOV    @R1,A
003F 09             INC    R1
0040 F7             MOV    @R1,A
                                           ; SOURCE LINE # 337 
0041 7900    R      MOV    R1,#Stop+04H
0043 F7             MOV    @R1,A
0044 09             INC    R1
0045 F7             MOV    @R1,A
                                           ; SOURCE LINE # 338 
0046 7900    R      MOV    R1,#Stop+06H
0048 F7             MOV    @R1,A
0049 09             INC    R1
004A F7             MOV    @R1,A
                                           ; SOURCE LINE # 339 
004B F5E9           MOV    CL,A
004D F5F9           MOV    CH,A
                                           ; SOURCE LINE # 340 
004F F5D8           MOV    CCON,A
                                           ; SOURCE LINE # 341 
0051 75D904         MOV    CMOD,#004H
                                           ; SOURCE LINE # 342 
0054 75DE21         MOV    CCAPM4,#021H
0057         ?NXT45:
0057 D007           POP    AR7
0059 D006           POP    AR6
005B D005           POP    AR5
005D D004           POP    AR4
005F D003           POP    AR3
0061 D002           POP    AR2
0063 D001           POP    AR1
0065 D000           POP    AR0
0067 D0D0           POP    PSW
0069 D082           POP    DPL
006B D083           POP    DPH
006D D0F0           POP    B
006F D0E0           POP    ACC
0071 32             RETI   

            ; FUNCTION KeyInt (END)

            ; FUNCTION KeyInt2 (BEGIN)
                                           ; SOURCE LINE # 395 
0000 C0E0           PUSH   ACC
0002 C0F0           PUSH   B
0004 C083           PUSH   DPH
0006 C082           PUSH   DPL
0008 C0D0           PUSH   PSW
000A C000           PUSH   AR0
000C C001           PUSH   AR1
000E C002           PUSH   AR2
0010 C003           PUSH   AR3
0012 C004           PUSH   AR4
0014 C005           PUSH   AR5
0016 C006           PUSH   AR6
0018 EF             MOV    A,R7
0019 C007           PUSH   AR7
                                           ; SOURCE LINE # 347 
001B 200003  R      JB     isInit,$ + 6
001E 020000  R      LJMP   ?NXT63
                                           ; SOURCE LINE # 350 
0021 120000  R      LCALL  DelayMs
                                           ; SOURCE LINE # 352 
0024 D290           SETB   uc1
                                           ; SOURCE LINE # 354 
0026 750000  R      MOV    s,#000H
0029         ?FOR11:
0029 E500    R      MOV    A,s
002B B40800         CJNE   A,#008H,?LAB38
002E         ?LAB38:
002E 5007           JNC    ?NXT56
                                           ; SOURCE LINE # 355 
0030 120000  R      LCALL  Delay1Ms
                                           ; SOURCE LINE # 354 
0033 0500    R      INC    s
0035 80F2           SJMP   ?FOR11
0037         ?NXT56:
                                           ; SOURCE LINE # 356 
0037 120000  R      LCALL  DelayUs
                                           ; SOURCE LINE # 357 
003A C290           CLR    uc1
                                           ; SOURCE LINE # 359 
003C A2B1           MOV    C,Pin7
003E E4             CLR    A
003F 33             RLC    A
0040 F500    R      MOV    delay_time,A
                                           ; SOURCE LINE # 360 
0042 C3             CLR    C
0043 33             RLC    A
0044 FB             MOV    R3,A
0045 A2B0           MOV    C,Pin8
0047 E4             CLR    A
0048 33             RLC    A
0049 2B             ADD    A,R3
004A F500    R      MOV    delay_time,A
                                           ; SOURCE LINE # 362 
004C E500    R      MOV    A,delay_time
004E 6032           JZ     ?CASE18
0050 14             DEC    A
0051 6008           JZ     ?CASE19
0053 14             DEC    A
0054 601B           JZ     ?CASE20
0056 14             DEC    A
0057 6007           JZ     ?CASE21
0059 8047           SJMP   ?NXT58
005B         ?CASE19:
                                           ; SOURCE LINE # 365 
005B 120000  R      LCALL  DelayUs
                                           ; SOURCE LINE # 367 
005E 8042           SJMP   ?NXT58
0060         ?CASE21:
                                           ; SOURCE LINE # 369 
0060 120000  R      LCALL  DelayUs
                                           ; SOURCE LINE # 371 
0063 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 372 
0066 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 373 
0069 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 374 
006C 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 375 
006F 8031           SJMP   ?NXT58
0071         ?CASE20:
                                           ; SOURCE LINE # 378 
0071 750000  R      MOV    s,#000H
0074         ?FOR12:
0074 E500    R      MOV    A,s
0076 B40900         CJNE   A,#009H,?LAB41
0079         ?LAB41:
0079 5027           JNC    ?NXT58
                                           ; SOURCE LINE # 379 
007B 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 354 
007E 0500    R      INC    s
0080 80F2           SJMP   ?FOR12
0082         ?CASE18:
                                           ; SOURCE LINE # 383 
0082 750000  R      MOV    s,#000H
0085         ?FOR13:
0085 E500    R      MOV    A,s
0087 B40C00         CJNE   A,#00CH,?LAB43
008A         ?LAB43:
008A 5007           JNC    ?NXT61
                                           ; SOURCE LINE # 384 
008C 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 354 
008F 0500    R      INC    s
0091 80F2           SJMP   ?FOR13
0093         ?NXT61:
                                           ; SOURCE LINE # 385 
0093 120000  R      LCALL  Delay1Ms
                                           ; SOURCE LINE # 386 
0096 120000  R      LCALL  Delay1Ms
                                           ; SOURCE LINE # 387 
0099 120000  R      LCALL  Delay1Ms
                                           ; SOURCE LINE # 388 
009C 120000  R      LCALL  Delay1Ms
                                           ; SOURCE LINE # 389 
009F 120000  R      LCALL  Delay1Ms
00A2         ?NXT58:
                                           ; SOURCE LINE # 393 
00A2 D291           SETB   uc2
                                           ; SOURCE LINE # 394 
00A4 120000  R      LCALL  Delay10Ms
                                           ; SOURCE LINE # 395 
00A7 C291           CLR    uc2
00A9         ?NXT63:
00A9 D007           POP    AR7
00AB D006           POP    AR6
00AD D005           POP    AR5
00AF D004           POP    AR4
00B1 D003           POP    AR3
00B3 D002           POP    AR2
00B5 D001           POP    AR1
00B7 D000           POP    AR0
00B9 D0D0           POP    PSW
00BB D082           POP    DPL
00BD D083           POP    DPH
00BF D0F0           POP    B
00C1 D0E0           POP    ACC
00C3 32             RETI   

            ; FUNCTION KeyInt2 (END)

            ; FUNCTION _LongToAscii (BEGIN)
                                           ; SOURCE LINE # 423 
0000 8C00    R      MOV    Value,R4
0002 8D00    R      MOV    Value+01H,R5
0004 8E00    R      MOV    Value+02H,R6
0006 8F00    R      MOV    Value+03H,R7
                                           ; SOURCE LINE # 405 
0008 C200    R      CLR    isDivisible
                                           ; SOURCE LINE # 406 
000A 75003B  R      MOV    Divisor,#03BH
000D 75009A  R      MOV    Divisor+01H,#09AH
0010 7500CA  R      MOV    Divisor+02H,#0CAH
0013 E4             CLR    A
0014 F500    R      MOV    Divisor+03H,A
                                           ; SOURCE LINE # 409 
0016 EC             MOV    A,R4
0017 4D             ORL    A,R5
0018 4E             ORL    A,R6
0019 4F             ORL    A,R7
001A 7006           JNZ    ?NXT69
                                           ; SOURCE LINE # 411 
001C 7F30           MOV    R7,#030H
001E 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 412 
0021 22             RET    
0022         ?NXT69:
                                           ; SOURCE LINE # 414 
0022 750000  R      MOV    k,#000H
0025         ?FOR15:
                                           ; SOURCE LINE # 416 
0025 C000    R      PUSH   Divisor
0027 C000    R      PUSH   Divisor+01H
0029 C000    R      PUSH   Divisor+02H
002B C000    R      PUSH   Divisor+03H
002D AC00    R      MOV    R4,Value
002F AD00    R      MOV    R5,Value+01H
0031 AE00    R      MOV    R6,Value+02H
0033 AF00    R      MOV    R7,Value+03H
0035 120000  R      LCALL  ?C_CMPL
0038 BF0102         CJNE   R7,#001H,?LAB53
003B 8002           SJMP   ?NXT72
003D         ?LAB53:
003D D200    R      SETB   isDivisible
003F         ?NXT72:
                                           ; SOURCE LINE # 417 
003F 300041  R      JNB    isDivisible,?NXT73
                                           ; SOURCE LINE # 419 
0042 C000    R      PUSH   Value
0044 C000    R      PUSH   Value+01H
0046 C000    R      PUSH   Value+02H
0048 C000    R      PUSH   Value+03H
004A AC00    R      MOV    R4,Divisor
004C AD00    R      MOV    R5,Divisor+01H
004E AE00    R      MOV    R6,Divisor+02H
0050 AF00    R      MOV    R7,Divisor+03H
0052 120000  R      LCALL  ?C_ULDIV_SP
0055 8F00    R      MOV    Q,R7
                                           ; SOURCE LINE # 420 
0057 E500    R      MOV    A,Q
0059 2430           ADD    A,#030H
005B FF             MOV    R7,A
005C 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 421 
005F C000    R      PUSH   Value
0061 C000    R      PUSH   Value+01H
0063 C000    R      PUSH   Value+02H
0065 C000    R      PUSH   Value+03H
0067 C000    R      PUSH   Divisor
0069 C000    R      PUSH   Divisor+01H
006B C000    R      PUSH   Divisor+02H
006D C000    R      PUSH   Divisor+03H
006F E4             CLR    A
0070 FE             MOV    R6,A
0071 FC             MOV    R4,A
0072 FD             MOV    R5,A
0073 AF00    R      MOV    R7,Q
0075 120000  R      LCALL  ?C_LMUL
0078 120000  R      LCALL  ?C_LSUB
007B 8C00    R      MOV    Value,R4
007D 8D00    R      MOV    Value+01H,R5
007F 8E00    R      MOV    Value+02H,R6
0081 8F00    R      MOV    Value+03H,R7
0083         ?NXT73:
                                           ; SOURCE LINE # 423 
0083 C000    R      PUSH   Divisor
0085 C000    R      PUSH   Divisor+01H
0087 C000    R      PUSH   Divisor+02H
0089 C000    R      PUSH   Divisor+03H
008B E4             CLR    A
008C FC             MOV    R4,A
008D FD             MOV    R5,A
008E FE             MOV    R6,A
008F 740A           MOV    A,#00AH
0091 FF             MOV    R7,A
0092 120000  R      LCALL  ?C_ULDIV_SP
0095 8C00    R      MOV    Divisor,R4
0097 8D00    R      MOV    Divisor+01H,R5
0099 8E00    R      MOV    Divisor+02H,R6
009B 8F00    R      MOV    Divisor+03H,R7
                                           ; SOURCE LINE # 414 
009D 0500    R      INC    k
009F E500    R      MOV    A,k
00A1 B40A81         CJNE   A,#00AH,?FOR15
00A4 22             RET    

            ; FUNCTION _LongToAscii (END)

            ; FUNCTION _Convert (BEGIN)
              ; Register R6R7 is assigned to parameter NegEdge
              ; R4R5 is assigned to pw
                                           ; SOURCE LINE # 438 
0000 E4             CLR    A
0001 FD             MOV    R5,A
0002 FC             MOV    R4,A
0003 F500    R      MOV    time,A
0005 F500    R      MOV    time+01H,A
0007 8E00    R      MOV    time+02H,R6
0009 8F00    R      MOV    time+03H,R7
                                           ; SOURCE LINE # 439 
000B C000    R      PUSH   time
000D C000    R      PUSH   time+01H
000F C000    R      PUSH   time+02H
0011 C000    R      PUSH   time+03H
0013 FE             MOV    R6,A
0014 740A           MOV    A,#00AH
0016 FF             MOV    R7,A
0017 120000  R      LCALL  ?C_LMUL
001A 8C00    R      MOV    time,R4
001C 8D00    R      MOV    time+01H,R5
001E 8E00    R      MOV    time+02H,R6
0020 8F00    R      MOV    time+03H,R7
                                           ; SOURCE LINE # 440 
0022 C000    R      PUSH   time
0024 C000    R      PUSH   time+01H
0026 C000    R      PUSH   time+02H
0028 C000    R      PUSH   time+03H
002A E4             CLR    A
002B FC             MOV    R4,A
002C FD             MOV    R5,A
002D 7412           MOV    A,#012H
002F FE             MOV    R6,A
0030 E4             CLR    A
0031 FF             MOV    R7,A
0032 120000  R      LCALL  ?C_ULDIV_SP
0035 8C00    R      MOV    wPart,R4
0037 8D00    R      MOV    wPart+01H,R5
0039 8E00    R      MOV    wPart+02H,R6
003B 8F00    R      MOV    wPart+03H,R7
                                           ; SOURCE LINE # 441 
003D C000    R      PUSH   time
003F C000    R      PUSH   time+01H
0041 C000    R      PUSH   time+02H
0043 C000    R      PUSH   time+03H
0045 E4             CLR    A
0046 FC             MOV    R4,A
0047 FD             MOV    R5,A
0048 7403           MOV    A,#003H
004A FE             MOV    R6,A
004B 74E8           MOV    A,#0E8H
004D FF             MOV    R7,A
004E 120000  R      LCALL  ?C_LMUL
0051 8C00    R      MOV    time,R4
0053 8D00    R      MOV    time+01H,R5
0055 8E00    R      MOV    time+02H,R6
0057 8F00    R      MOV    time+03H,R7
                                           ; SOURCE LINE # 442 
0059 C000    R      PUSH   time
005B C000    R      PUSH   time+01H
005D C000    R      PUSH   time+02H
005F C000    R      PUSH   time+03H
0061 E4             CLR    A
0062 FC             MOV    R4,A
0063 FD             MOV    R5,A
0064 7412           MOV    A,#012H
0066 FE             MOV    R6,A
0067 E4             CLR    A
0068 FF             MOV    R7,A
0069 120000  R      LCALL  ?C_ULDIV_SP
006C 8C00    R      MOV    time,R4
006E 8D00    R      MOV    time+01H,R5
0070 8E00    R      MOV    time+02H,R6
0072 8F00    R      MOV    time+03H,R7
                                           ; SOURCE LINE # 443 
0074 C000    R      PUSH   time
0076 C000    R      PUSH   time+01H
0078 C000    R      PUSH   time+02H
007A C000    R      PUSH   time+03H
007C C000    R      PUSH   wPart
007E C000    R      PUSH   wPart+01H
0080 C000    R      PUSH   wPart+02H
0082 C000    R      PUSH   wPart+03H
0084 E4             CLR    A
0085 FC             MOV    R4,A
0086 FD             MOV    R5,A
0087 7403           MOV    A,#003H
0089 FE             MOV    R6,A
008A 74E8           MOV    A,#0E8H
008C FF             MOV    R7,A
008D 120000  R      LCALL  ?C_LMUL
0090 120000  R      LCALL  ?C_LSUB
0093 8E00    R      MOV    fPart,R6
0095 8F00    R      MOV    fPart+01H,R7
                                           ; SOURCE LINE # 444 
0097 AC00    R      MOV    R4,wPart
0099 AD00    R      MOV    R5,wPart+01H
009B AE00    R      MOV    R6,wPart+02H
009D AF00    R      MOV    R7,wPart+03H
009F 120000  R      LCALL  _LongToAscii
                                           ; SOURCE LINE # 446 
00A2 7F2E           MOV    R7,#02EH
00A4 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 449 
00A7 AE00    R      MOV    R6,fPart
00A9 AF00    R      MOV    R7,fPart+01H
00AB E4             CLR    A
00AC FC             MOV    R4,A
00AD 7D64           MOV    R5,#064H
00AF 120000  R      LCALL  ?C_UIDIV
00B2 EF             MOV    A,R7
00B3 2430           ADD    A,#030H
00B5 FF             MOV    R7,A
00B6 120000  R      LCALL  _LcdWriteChar
00B9 22             RET    

            ; FUNCTION _Convert (END)

            ; FUNCTION DelayUs (BEGIN)
                                           ; SOURCE LINE # 488 
0000 758B90         MOV    TL1,#090H
0003 758DFE         MOV    TH1,#0FEH
                                           ; SOURCE LINE # 494 
0006 D28E           SETB   TR1
0008         ?WHILE3:
                                           ; SOURCE LINE # 495 
0008 308FFD         JNB    TF1,?WHILE3
                                           ; SOURCE LINE # 496 
000B C28E           CLR    TR1
                                           ; SOURCE LINE # 497 
000D C28F           CLR    TF1
000F 22             RET    

            ; FUNCTION DelayUs (END)

            ; FUNCTION Delay10Ms (BEGIN)
                                           ; SOURCE LINE # 501 
0000 758B00         MOV    TL1,#000H
0003 758DB8         MOV    TH1,#0B8H
                                           ; SOURCE LINE # 502 
0006 D28E           SETB   TR1
0008         ?WHILE5:
                                           ; SOURCE LINE # 503 
0008 308FFD         JNB    TF1,?WHILE5
                                           ; SOURCE LINE # 504 
000B C28E           CLR    TR1
                                           ; SOURCE LINE # 505 
000D C28F           CLR    TF1
000F 22             RET    

            ; FUNCTION Delay10Ms (END)

            ; FUNCTION Delay1Ms (BEGIN)
                                           ; SOURCE LINE # 509 
0000 758BCD         MOV    TL1,#0CDH
0003 758DF8         MOV    TH1,#0F8H
                                           ; SOURCE LINE # 510 
0006 D28E           SETB   TR1
0008         ?WHILE7:
                                           ; SOURCE LINE # 511 
0008 308FFD         JNB    TF1,?WHILE7
                                           ; SOURCE LINE # 512 
000B C28E           CLR    TR1
                                           ; SOURCE LINE # 513 
000D C28F           CLR    TF1
000F 22             RET    

            ; FUNCTION Delay1Ms (END)

            ; FUNCTION DelayMs (BEGIN)
                                           ; SOURCE LINE # 518 
0000 758B00         MOV    TL1,#000H
0003 758D04         MOV    TH1,#004H
                                           ; SOURCE LINE # 519 
0006 D28E           SETB   TR1
0008         ?WHILE9:
                                           ; SOURCE LINE # 520 
0008 308FFD         JNB    TF1,?WHILE9
                                           ; SOURCE LINE # 521 
000B C28E           CLR    TR1
                                           ; SOURCE LINE # 522 
000D C28F           CLR    TF1
000F 22             RET    

            ; FUNCTION DelayMs (END)

            ; FUNCTION LcdInit (BEGIN)
                                           ; SOURCE LINE # 527 
0000 7F38           MOV    R7,#038H
0002 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 528 
0005 7F38           MOV    R7,#038H
0007 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 529 
000A 7F38           MOV    R7,#038H
000C 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 530 
000F 7F06           MOV    R7,#006H
0011 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 531 
0014 7F0C           MOV    R7,#00CH
0016 120000  R      LCALL  _LcdWriteCmd
0019 22             RET    

            ; FUNCTION LcdInit (END)

            ; FUNCTION LcdBusy (BEGIN)
                                           ; SOURCE LINE # 536 
0000 D287           SETB   BS
                                           ; SOURCE LINE # 537 
0002 D2A3           SETB   EN
                                           ; SOURCE LINE # 538 
0004 C2A2           CLR    RS
                                           ; SOURCE LINE # 539 
0006 D2A5           SETB   RW
0008         ?WHILE11:
                                           ; SOURCE LINE # 540 
0008 308706         JNB    BS,?NXT83
                                           ; SOURCE LINE # 542 
000B C2A3           CLR    EN
                                           ; SOURCE LINE # 543 
000D D2A3           SETB   EN
000F 80F7           SJMP   ?WHILE11
0011         ?NXT83:
0011 22             RET    

            ; FUNCTION LcdBusy (END)

            ; FUNCTION _LcdWriteCmd (BEGIN)
              ; Register R7 is assigned to parameter var
                                           ; SOURCE LINE # 548 
0000 8F80           MOV    P0,R7
                                           ; SOURCE LINE # 549 
0002 C2A2           CLR    RS
                                           ; SOURCE LINE # 550 
0004 C2A5           CLR    RW
                                           ; SOURCE LINE # 551 
0006 D2A3           SETB   EN
                                           ; SOURCE LINE # 552 
0008 C2A3           CLR    EN
                                           ; SOURCE LINE # 553 
000A 120000  R      LCALL  LcdBusy
000D 22             RET    

            ; FUNCTION _LcdWriteCmd (END)

            ; FUNCTION _LcdWriteChar (BEGIN)
              ; Register R7 is assigned to parameter var
                                           ; SOURCE LINE # 557 
0000 8F80           MOV    P0,R7
                                           ; SOURCE LINE # 558 
0002 D2A2           SETB   RS
                                           ; SOURCE LINE # 559 
0004 C2A5           CLR    RW
                                           ; SOURCE LINE # 560 
0006 D2A3           SETB   EN
                                           ; SOURCE LINE # 561 
0008 C2A3           CLR    EN
                                           ; SOURCE LINE # 562 
000A 120000  R      LCALL  LcdBusy
000D 22             RET    

            ; FUNCTION _LcdWriteChar (END)

            ; FUNCTION _LcdWriteStr (BEGIN)
              ; Register R0R4R5 is assigned to parameter var
                                           ; SOURCE LINE # 567 
0000 EB             MOV    A,R3
0001 FD             MOV    R5,A
0002 EA             MOV    A,R2
0003 FC             MOV    R4,A
0004 E9             MOV    A,R1
0005 F8             MOV    R0,A
0006         ?WHILE13:
                                           ; SOURCE LINE # 566 
0006 ED             MOV    A,R5
0007 FB             MOV    R3,A
0008 EC             MOV    A,R4
0009 FA             MOV    R2,A
000A E8             MOV    A,R0
000B F9             MOV    R1,A
000C 120000  R      LCALL  IPGN1?C
000F 6015           JZ     ?NXT85
                                           ; SOURCE LINE # 567 
0011 ED             MOV    A,R5
0012 FB             MOV    R3,A
0013 EC             MOV    A,R4
0014 FA             MOV    R2,A
0015 E8             MOV    A,R0
0016 F9             MOV    R1,A
0017 08             INC    R0
0018 E8             MOV    A,R0
0019 7002           JNZ    ?LAB76
001B 0C             INC    R4
001C EC             MOV    A,R4
001D         ?LAB76:
001D 120000  R      LCALL  IPGN1?C
0020 FF             MOV    R7,A
0021 120000  R      LCALL  _LcdWriteChar
0024 80E0           SJMP   ?WHILE13
0026         ?NXT85:
0026 22             RET    

            ; FUNCTION _LcdWriteStr (END)

            ; FUNCTION _LcdGotoXY (BEGIN)
              ; Register R6 is assigned to parameter row
                                           ; SOURCE LINE # 583 
0000 8F06           MOV    AR6,R7
              ; Register R5 is assigned to parameter col
                                           ; SOURCE LINE # 572 
0002 EE             MOV    A,R6
0003 14             DEC    A
0004 600A           JZ     ?CASE26
0006 14             DEC    A
0007 600F           JZ     ?CASE27
0009 14             DEC    A
000A 6014           JZ     ?CASE28
000C 14             DEC    A
000D 6019           JZ     ?CASE29
000F 22             RET    
0010         ?CASE26:
                                           ; SOURCE LINE # 579 
0010 ED             MOV    A,R5
0011 247F           ADD    A,#07FH
0013 FF             MOV    R7,A
0014 120000  R      LCALL  _LcdWriteCmd
0017 22             RET    
0018         ?CASE27:
                                           ; SOURCE LINE # 580 
0018 ED             MOV    A,R5
0019 24BF           ADD    A,#0BFH
001B FF             MOV    R7,A
001C 120000  R      LCALL  _LcdWriteCmd
001F 22             RET    
0020         ?CASE28:
                                           ; SOURCE LINE # 581 
0020 ED             MOV    A,R5
0021 248F           ADD    A,#08FH
0023 FF             MOV    R7,A
0024 120000  R      LCALL  _LcdWriteCmd
0027 22             RET    
0028         ?CASE29:
                                           ; SOURCE LINE # 582 
0028 ED             MOV    A,R5
0029 24CF           ADD    A,#0CFH
002B FF             MOV    R7,A
002C 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 583 
002F 22             RET    

            ; FUNCTION _LcdGotoXY (END)

            ; FUNCTION LcdClear (BEGIN)
                                           ; SOURCE LINE # 589 
0000 7F01           MOV    R7,#001H
0002 120000  R      LCALL  _LcdWriteCmd
              ; R7 is assigned to h
                                           ; SOURCE LINE # 590 
0005 7F00           MOV    R7,#000H
0007         ?FOR17:
                                           ; SOURCE LINE # 591 
0007 120000  R      LCALL  DelayUs
                                           ; SOURCE LINE # 590 
000A 0F             INC    R7
000B BF64F9         CJNE   R7,#064H,?FOR17
000E 22             RET    

            ; FUNCTION LcdClear (END)

C51 COMPILER V6.11.3B,  MAIN                      08/22/111  08:36:47  PAGE  3

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====

Key1 . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
Key2 . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0001H   1    
i. . . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0002H   1    
g. . . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0003H   1    
isInit . . . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0000H   1    
finish . . . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0001H   1    
flag2. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0002H   1    
Stop . . . . . . . . . . . . . . . . .  PUBLIC  IDATA   ARRAY   0000H   8    
cnt. . . . . . . . . . . . . . . . . .  PUBLIC  DATA    CHAR    0004H   1    
s. . . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0005H   1    
delay_time . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0006H   1    
delay_time_pre . . . . . . . . . . . .  PUBLIC  DATA    BASE    0007H   1    
main . . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
PCATimers. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
KeyInt . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
KeyInt2. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LongToAscii. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  Value?052. . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   4    
  Value?052. . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   4    
isDivisible?053. . . . . . . . . . . .  PUBLIC  DATA    BIT     0000H   1    
Divisor?054. . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0004H   4    
k?055. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0008H   1    
Q?056. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0009H   1    
Convert. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  NegEdge?057. . . . . . . . . . . . .  PARAM   DATA    U_INT  0000H   2    
  NegEdge?057. . . . . . . . . . . . .  PARAM   DATA    U_INT  0000H   2    
pw?058 . . . . . . . . . . . . . . . .  PUBLIC  DATA    U_INT  0000H   2    
time?059 . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   4    
wPart?060. . . . . . . . . . . . . . .  PUBLIC  DATA    LONG    0004H   4    
fPart?061. . . . . . . . . . . . . . .  PUBLIC  DATA    U_INT  0008H   2    
decimal?062. . . . . . . . . . . . . .  PUBLIC  DATA    U_INT  0000H   2    
DelayUs. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
Delay10Ms. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
Delay1Ms . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
DelayMs. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdInit. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdBusy. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdWriteCmd. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?067. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  var?067. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
LcdWriteChar . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?068. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  var?068. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
LcdWriteStr. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?069. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
  var?069. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
LcdGotoXY. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  row?070. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  col?071. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0001H   1    
  row?070. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  col?071. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0001H   1    
LcdClear . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
h?072. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
C51 COMPILER V6.11.3B,  MAIN                      08/22/111  08:36:47  PAGE  4



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1489    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      21
   IDATA SIZE       =      8    ----
   BIT SIZE         =      3       1
END OF MODULE INFORMATION.

C51 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
